/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.ris.src;

import app.ris.bo.Constants;
import app.ris.bo.PatientAttendantInfo;
import app.ris.bo.PatientBO;
import app.ris.dam.dam;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.sun.glass.events.KeyEvent;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ButtonGroup;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import org.apache.commons.io.FileUtils;

/**
 *
 *
 */
public class CapturePicture extends javax.swing.JInternalFrame {

    /**
     * Creates new form NewJInternalFrame
     */
    PatientRegistrationForm regObj = null;
    HashMap<String, PatientBO> viewMap = new HashMap<String, PatientBO>();
    dam d = new dam();
    String id = null;
    boolean pro_flag=false,id_front_flag=false,id_back_flag=false,refer_flag=false;
    final JPanel jPanelWebcam = new JPanel();
    private String tempDir =  null;
//    static {
//		Webcam.setDriver(new WebcamDummyDriver(3));
//	}
    JInternalFrame window = new JInternalFrame();
//    ImagePanel panel=null;
//    Webcam 

    public CapturePicture(String id) {
//        String baseDir = CapturePicture.class.getProtectionDomain().getCodeSource().getLocation().getPath();
//        baseDir = baseDir.substring(0, baseDir.lastIndexOf("/"));
        
        
        tempDir = System.getProperty("java.io.tmpdir")+"\\capture";
        new File(tempDir).mkdirs();
        
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        this.id = id;
        Constants.webcam = Webcam.getDefault();
        Constants.webcam.setViewSize(new Dimension(320, 240));

        WebcamPanel webcamPanel = new WebcamPanel(Constants.webcam);
        webcamPanel.setMirrored(false);

        jPanelWebcam.add(webcamPanel);
        window.add(jPanelWebcam);
//        
        window.setPreferredSize(new Dimension(320, 240));
        window.pack();
        window.setVisible(true);
//        
//        
        window.putClientProperty("JInternalFrame.isPalette", Boolean.TRUE);
        getRootPane().setWindowDecorationStyle(JRootPane.NONE);
        ((BasicInternalFrameUI) window.getUI()).setNorthPane(null);
        window.setBorder(null);

        initComponents();
//        this.setLayout(new FlowLayout());
//        add(l);
//        add(window);

//        initComponents();
        jp.add(window);
//        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
//        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        Dimension desktopSize = Constants.pane1.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,
            (desktopSize.height- jInternalFrameSize.height)/2);
        this.setVisible(true);
        ButtonGroup bg = new ButtonGroup();
        bg.add(radioAttendant);
        bg.add(radioPatient);

       if (!this.id.equals("")) {
            this.txtSid.setText(id);
            searchPatient();
        }
        
        setCursor(Cursor.getDefaultCursor());

    }

    public ImageIcon resizeIcon(ImageIcon imageIcon, int width, int height) {
        return new ImageIcon(imageIcon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH));
    }

    public static Image iconToImage(Icon icon) {
        return ((ImageIcon) icon).getImage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
     @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jp3 = new javax.swing.JPanel();
        jp2 = new javax.swing.JPanel();
        jpp = new javax.swing.JPanel();
        jp1 = new javax.swing.JPanel();
        jp = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtSid = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSname = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        radioPatient = new javax.swing.JRadioButton();
        radioAttendant = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        btnClear1 = new javax.swing.JButton();
        l = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setMaximizable(true);
        setResizable(true);

        jp3.setBorder(javax.swing.BorderFactory.createTitledBorder("Prescription"));
        jp3.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout jp3Layout = new javax.swing.GroupLayout(jp3);
        jp3.setLayout(jp3Layout);
        jp3Layout.setHorizontalGroup(
            jp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );
        jp3Layout.setVerticalGroup(
            jp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jp2.setBorder(javax.swing.BorderFactory.createTitledBorder("ID Card Back Side"));
        jp2.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout jp2Layout = new javax.swing.GroupLayout(jp2);
        jp2.setLayout(jp2Layout);
        jp2Layout.setHorizontalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jp2Layout.setVerticalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 217, Short.MAX_VALUE)
        );

        jpp.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Picture"));
        jpp.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout jppLayout = new javax.swing.GroupLayout(jpp);
        jpp.setLayout(jppLayout);
        jppLayout.setHorizontalGroup(
            jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );
        jppLayout.setVerticalGroup(
            jppLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 217, Short.MAX_VALUE)
        );

        jp1.setBorder(javax.swing.BorderFactory.createTitledBorder("ID Card Front Side"));
        jp1.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout jp1Layout = new javax.swing.GroupLayout(jp1);
        jp1.setLayout(jp1Layout);
        jp1Layout.setHorizontalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jp1Layout.setVerticalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 217, Short.MAX_VALUE)
        );

        jp.setBorder(javax.swing.BorderFactory.createTitledBorder("Camera Stream"));
        jp.setPreferredSize(new java.awt.Dimension(320, 240));

        javax.swing.GroupLayout jpLayout = new javax.swing.GroupLayout(jp);
        jp.setLayout(jpLayout);
        jpLayout.setHorizontalGroup(
            jpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 308, Short.MAX_VALUE)
        );
        jpLayout.setVerticalGroup(
            jpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 217, Short.MAX_VALUE)
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Patient"));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Patient ID:");

        txtSid.setToolTipText("");
        txtSid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSidKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Name:");

        txtSname.setEditable(false);
        txtSname.setEnabled(false);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSname, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSid, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSid, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSname, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Capture Options"));

        jButton4.setText("Capture Profile Picture");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Clear");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Clear");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Capture ID Card Front");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Capture ID Card Back");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Capture Perscription");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Clear");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Clear");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        radioPatient.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        radioPatient.setSelected(true);
        radioPatient.setText("Patient ");
        radioPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioPatientMouseClicked(evt);
            }
        });
        radioPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioPatientActionPerformed(evt);
            }
        });

        radioAttendant.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        radioAttendant.setText("Attendant");
        radioAttendant.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radioAttendantMouseClicked(evt);
            }
        });
        radioAttendant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioAttendantActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(radioPatient)
                        .addGap(18, 18, 18)
                        .addComponent(radioAttendant)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton10)
                            .addComponent(jButton11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioPatient)
                    .addComponent(radioAttendant))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton10))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton11))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnExit.setBackground(new java.awt.Color(255, 0, 0));
        btnExit.setText("Exit");
        btnExit.setActionCommand("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jButton12.setText("Clear");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        btnClear1.setText("Save");
        btnClear1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClear1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnClear1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 278, Short.MAX_VALUE)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(btnClear1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        l.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        l.setText("   Patient Registration");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jpp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jp3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jp2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(l, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(l, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jpp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jp3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        searchPatient();
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jpp.removeAll();
        jpp.invalidate();
        jpp.repaint();

        pro_flag=false;
        this.validate();
        this.repaint();

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jpp.removeAll();
        try {
            BufferedImage image = Constants.webcam.getImage();

            File path = new File(tempDir+"\\pro.png");
            System.out.println(tempDir);
            path.getParentFile().mkdirs();
            // save image to PNG file
            ImageIO.write(image, "PNG", path);
            BackgroundPanel bp = new BackgroundPanel(path.getAbsolutePath());
            jpp.add(bp);
            jpp.validate();
            jpp.repaint();

            pro_flag=true;
        } catch (IOException ex) {
            Logger.getLogger(CapturePicture.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        jp1.removeAll();
        try {
            BufferedImage image = Constants.webcam.getImage();

            File path = new File(tempDir+"\\id.png");
            path.getParentFile().mkdirs();
            // save image to PNG file
            ImageIO.write(image, "PNG", path);
            BackgroundPanel bp = new BackgroundPanel(path.getAbsolutePath());
            jp1.add(bp);
            jp1.validate();
            jp1.repaint();

            id_front_flag=true;
        } catch (IOException ex) {
            Logger.getLogger(CapturePicture.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        jp1.removeAll();
        jp1.invalidate();
        jp1.repaint();

        id_front_flag=false;
        this.validate();
        this.repaint();

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        jp3.removeAll();
        jp3.invalidate();
        jp3.repaint();

        refer_flag=false;
        this.validate();
        this.repaint();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        jp2.removeAll();
        try {
            BufferedImage image = Constants.webcam.getImage();

            File path = new File(tempDir+"\\id2.png");
            path.getParentFile().mkdirs();
            // save image to PNG file
            ImageIO.write(image, "PNG", path);
            BackgroundPanel bp = new BackgroundPanel(path.getAbsolutePath());
            jp2.add(bp);
            jp2.validate();
            jp2.repaint();

            id_back_flag=true;
        } catch (IOException ex) {
            Logger.getLogger(CapturePicture.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jp3.removeAll();
        try {
            BufferedImage image = Constants.webcam.getImage();
            File path = new File(tempDir+"\\per.png");
            path.getParentFile().mkdirs();
            // save image to PNG file
            ImageIO.write(image, "PNG", path);
            BackgroundPanel bp = new BackgroundPanel(path.getAbsolutePath());
            jp3.add(bp);
            jp3.validate();
            jp3.repaint();

            refer_flag=true;
        } catch (IOException ex) {
            Logger.getLogger(CapturePicture.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        jp2.removeAll();
        jp2.invalidate();
        jp2.repaint();

        id_back_flag=false;
        this.validate();
        this.repaint();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        clear();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
//        Constants.bgFrame.show();
        window.dispose();
        Constants.webcam.close();
        this.dispose();
        regObj.show();
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnClear1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClear1ActionPerformed
        String pictures[] = new String[4];
        pictures[0] = tempDir+"\\pro.png";
        pictures[1] = tempDir+"\\id.png";
        pictures[2] = tempDir+"\\id2.png";
        pictures[3] = tempDir+"\\per.png";

        for (int i = 0; i < pictures.length; i++) {
            try {
                File temp = new File(pictures[i]);
                temp.getParentFile().mkdirs();
                temp.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(CapturePicture.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (!txtSid.getText().equals("") && radioPatient.isSelected()) {
            String info[] = txtSid.getText().split("-");
            
            try {
                
                File server_path = new File(Constants.JPEG_Server_Path +"\\"+info[0]+ "\\"+info[1]+"\\");
                server_path.mkdirs();
//                for(int i=0;i<pictures.length;i++)
//                {
//                    FileUtils.copyFileToDirectory(new File(pictures[i]), server_path, false);
//                }

                if(pro_flag)
                {
                    FileUtils.copyFileToDirectory(new File(pictures[0]), server_path, false);
                }
                if(id_front_flag)
                {
                    FileUtils.copyFileToDirectory(new File(pictures[1]), server_path, false);
                }
                if(id_back_flag)
                {
                    FileUtils.copyFileToDirectory(new File(pictures[2]), server_path, false);
                }
                if(refer_flag)
                {
                    FileUtils.copyFileToDirectory(new File(pictures[3]), server_path, false);
                }
                String paths[] = new String[4];
                paths[0] = Constants.JPEG_Server_Path + "/"+info[0]+ "/"+info[1]+"/pro.png";
                paths[1] = Constants.JPEG_Server_Path + "/"+info[0]+ "/"+info[1]+"/id.png";
                paths[2] = Constants.JPEG_Server_Path + "/"+info[0]+ "/"+info[1]+"/id2.png";
                paths[3] = Constants.JPEG_Server_Path + "/"+info[0]+ "/"+info[1]+"/per.png";
                if(d.insertPatientPaths(info[0],info[1],paths))
                {
                    JOptionPane.showMessageDialog(this, "Pictures Saved Successfully");
                    deleteFolder(new File(tempDir));
                    clear();
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Unable to Access Path: "+ Constants.JPEG_Server_Path+
                        "\nPlease ask Administrator to provide access to Highlighted Path");
                Logger.getLogger(CapturePicture.class.getName()).log(Level.SEVERE, null, ex);
            }
            
//            d.insertPatientPictures(pictures, info[0], info[1]);
            
        } 
        else  if (!txtSid.getText().equals("") && radioAttendant.isSelected()) 
        {
            String info[] = txtSid.getText().split("-");

            
            try {
                
                File server_path = new File(Constants.JPEG_Server_Path + "\\"+info[0]+ "\\"+info[1]+"\\Attendant\\");
                server_path.mkdirs();
//                for(int i=0;i<pictures.length;i++)
//                {
//                    FileUtils.copyFileToDirectory(new File(pictures[i]), server_path, false);
//                }

                if(pro_flag)
                {
                    FileUtils.copyFileToDirectory(new File(pictures[0]), server_path, false);
                }
                if(id_front_flag)
                {
                    FileUtils.copyFileToDirectory(new File(pictures[1]), server_path, false);
                }
                if(id_back_flag)
                {
                    FileUtils.copyFileToDirectory(new File(pictures[2]), server_path, false);
                }
                if(refer_flag)
                {
                    FileUtils.copyFileToDirectory(new File(pictures[3]), server_path, false);
                }
                String paths[] = new String[4];
                paths[0] = Constants.JPEG_Server_Path + "/"+info[0]+ "/"+info[1]+"/Attendant/pro.png";
                paths[1] = Constants.JPEG_Server_Path + "/"+info[0]+ "/"+info[1]+"/Attendant/id.png";
                paths[2] = Constants.JPEG_Server_Path + "/"+info[0]+ "/"+info[1]+"/Attendant/id2.png";
                paths[3] = Constants.JPEG_Server_Path + "/"+info[0]+ "/"+info[1]+"/Attendant/per.png";
                if(d.insertAttendantPatientPaths(info[0],info[1],paths))
                {
                    JOptionPane.showMessageDialog(this, "Pictures Saved Successfully");
                    deleteFolder(new File(tempDir));
                    clear();
                }
            } catch (IOException ex) {
                Logger.getLogger(CapturePicture.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
//            JOptionPane.showMessageDialog(this, "Pictures Saved Successfully");
//                d.getPatientPicture();
            deleteFolder(new File(tempDir));
            clear();
        }
        else {
            JOptionPane.showMessageDialog(this, "Please Provide Patient ID");
        }
    }//GEN-LAST:event_btnClear1ActionPerformed

    private void txtSidKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSidKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchPatient();
        }
    }//GEN-LAST:event_txtSidKeyPressed

    private void radioPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioPatientMouseClicked

    }//GEN-LAST:event_radioPatientMouseClicked

    private void radioPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioPatientActionPerformed
        searchPatient();
    }//GEN-LAST:event_radioPatientActionPerformed

    private void radioAttendantMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radioAttendantMouseClicked
        
    }//GEN-LAST:event_radioAttendantMouseClicked

    private void radioAttendantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioAttendantActionPerformed

        String[] ids=txtSid.getText().split("\\-");
        try{
            if(ids.length==2)
            {
                PatientAttendantInfo pai = d.getAttendantInfo(ids[0], ids[1]);
                if(pai!=null)
                {
                    System.out.println("attendant exist... continue");
                    searchPatientAttendantInfo();
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Attendant Information not Found. Please save attendant Information first.");
                    return;
                }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Incomplete Patient ID");
            }
        }
        catch(Exception e)
        {}
        
    }//GEN-LAST:event_radioAttendantActionPerformed

    private void searchPatient() {
        radioPatient.setSelected(true);
        if (!txtSid.getText().isEmpty()) {
            
            String id[] = txtSid.getText().split("-");
            if(id.length<2) {
                String temp[] = new String[2];
                temp[0] = id[0];
                temp[1] = "";
                id = temp;
            }
            d.searchPatient(id[0], id[1], "", "", "", viewMap);
            if (viewMap.size() > 0) {
                PatientBO pbo = viewMap.get(id[1]);
                txtSname.setText(pbo.getName());
            }
            try{
//            d.getPatientPicture(id[0], id[1]);
            String pro_path = d.get_profile_picture(id[0], id[1]);
            String id_front = d.get_id_front(id[0], id[1]);
//            d.getPatientIdFront(id[0], id[1]);
//            d.getPatientIdBack(id[0], id[1]);
            String id_back = d.get_id_card_back(id[0], id[1]);
//            d.getPatientLetter(id[0], id[1]);
            String pres = d.get_prescription(id[0],id[1]);
            
            
            
            setProfilePicture(pro_path,jpp);;
            setProfilePicture(id_front,jp1);
            setProfilePicture(id_back,jp2);
            setProfilePicture(pres,jp3);
            }catch(Exception e)
            {}
        } else {
            JOptionPane.showMessageDialog(this, "Please Provide Patient ID");
        }
    }

    private void clear() {
        radioPatient.setSelected(true);
        txtSid.setText("");
        txtSname.setText("");
        jp2.removeAll();
        jp2.invalidate();
        jp2.repaint();
        jp1.removeAll();
        jp1.invalidate();
        jp1.repaint();
        jpp.removeAll();
        jpp.invalidate();
        jpp.repaint();
        jp3.removeAll();
        jp3.invalidate();
        jp3.repaint();
        this.validate();
        this.repaint();
        
        id_back_flag=false;
        id_front_flag=false;
        refer_flag=false;
        pro_flag=false;
    }

    private void deleteFolder(File folder) {
        File[] files = folder.listFiles();
        if (files != null) { //some JVMs return null for empty dirs
            for (File f : files) {
                if (f.isDirectory()) {
                    deleteFolder(f);
                } else {
                    f.delete();
                }
            }
        }
        folder.delete();
    }

    private void searchPatientAttendantInfo() {
        if (!txtSid.getText().isEmpty()) {
            
            String id[] = txtSid.getText().split("-");
            if(id.length<2) {
                String temp[] = new String[2];
                temp[0] = id[0];
                temp[1] = "";
                id = temp;
            }
            try{
            d.searchPatient(id[0], id[1], "", "", "", viewMap);
//            d.getAttendantPicture(id[0], id[1]);
            String pro_path = d.get_profile_picture_attendant(id[0], id[1]);
//            d.getAttendantIdFront(id[0], id[1]);
            String front_path=d.get_id_front_attendant(id[0], id[1]);
//            d.getAttendantIdBack(id[0], id[1]);
            String back_path = d.get_id_card_back_attendant(id[0], id[1]);
//            d.getAttendantLetter(id[0], id[1]);
            String letter = d.get_prescription_attendant(id[0], id[1]);
            setProfilePicture(pro_path,jpp);
            setProfilePicture(front_path,jp1);
            setProfilePicture(back_path,jp2);
            setProfilePicture(letter,jp3);
            }catch(Exception e)
            {}
            if (viewMap.size() > 0) {
                PatientBO pbo = viewMap.get(id[1]);
                txtSname.setText(pbo.getName());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Provide Patient ID");
        }
    }

//    class ImagePanel extends JPanel {
// 
//        private Image img;
//
//        public ImagePanel(String img) {
//          this(new ImageIcon(img).getImage());
//        }
//
//        public ImagePanel(Image img) {
//          this.img = img;
////          this.img = img.getScaledInstance(100, 100, Image.SCALE_DEFAULT);
//          Dimension size = new Dimension(img.getWidth(null), img.getHeight(null));
//          setPreferredSize(size);
//          setMinimumSize(size);
//          setMaximumSize(size);
//          setSize(size);
//          setLayout(null);
//        }
//
//        @Override
//        public void paintComponent(Graphics g) {
//          super.paintComponent(g);
//            g.drawImage(img, 0, 0, null);
//        }
//    }
    public class BackgroundPanel extends javax.swing.JPanel {

        java.awt.Image image;

        public BackgroundPanel(String path) {
            try {

                image = javax.imageio.ImageIO.read(new File(path));
                java.awt.Dimension size = new java.awt.Dimension(image.getWidth(null), image.getHeight(null));
                setPreferredSize(size);
                setMinimumSize(size);
                setMaximumSize(size);
                setSize(size);
                setLayout(null);
            } catch (Exception e) {
            }
        }

        @Override
        protected void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);
            if (image != null) {
                g.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), this);
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear1;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jp;
    private javax.swing.JPanel jp1;
    private javax.swing.JPanel jp2;
    private javax.swing.JPanel jp3;
    private javax.swing.JPanel jpp;
    private javax.swing.JLabel l;
    private javax.swing.JRadioButton radioAttendant;
    private javax.swing.JRadioButton radioPatient;
    private javax.swing.JTextField txtSid;
    private javax.swing.JTextField txtSname;
    // End of variables declaration//GEN-END:variables

private void setProfilePicture(String filePath,JPanel panel) {

            panel.removeAll();
            BackgroundPanel bp = new BackgroundPanel(filePath);
            panel.add(bp);
            panel.validate();
            panel.repaint();
                
    }


}
