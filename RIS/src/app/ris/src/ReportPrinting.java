/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.ris.src;

import org.apache.commons.io.FileUtils;
import app.ris.bo.Constants;
import app.ris.bo.DatePicker;
import app.ris.bo.DicomBo;
import app.ris.bo.OrderEntryBO;
import app.ris.bo.PatientBO;
import app.ris.bo.PatientReportBO;
import app.ris.dam.dam;
import app.ris.reporting.patientReport;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *

 */
public class ReportPrinting extends javax.swing.JInternalFrame {

    /**
     * Creates new form ReportPrinting
     */
    HashMap<String,OrderEntryBO> viewMap = new HashMap<String, OrderEntryBO>();
    
    dam dam = new dam();
    public static File file = null;
    String studyPath = "";
    public ReportPrinting() {
        initComponents();
        Dimension desktopSize = Constants.pane1.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,
            (desktopSize.height- jInternalFrameSize.height)/2);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        txtcnic = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePatient = new javax.swing.JTable();
        btnExit = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnPatientReport = new javax.swing.JButton();
        btnCDDVD = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Patient Reports");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel22.setText("Patient ID");

        txtPatientID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPatientIDKeyPressed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel23.setText("CNIC");

        txtcnic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcnicKeyPressed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tablePatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Patient_ID", "Name", "Date", "Order_Id", "CPT Name", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePatient.getTableHeader().setReorderingAllowed(false);
        tablePatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePatientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablePatient);

        btnExit.setBackground(new java.awt.Color(255, 0, 0));
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnPatientReport.setText("Report");
        btnPatientReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientReportActionPerformed(evt);
            }
        });

        btnCDDVD.setText("Write CD/DVD");
        btnCDDVD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCDDVDActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setText("Burn Media:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtcnic, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCDDVD)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPatientReport, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtcnic, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCDDVD, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPatientReport, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPatientIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientIDKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.searchPatient();
        }
    }//GEN-LAST:event_txtPatientIDKeyPressed

    private void txtcnicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcnicKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.searchPatient();
        }
    }//GEN-LAST:event_txtcnicKeyPressed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchPatient();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
//        Constants.bgFrame.show();
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed

        txtPatientID.setText("");
        
        txtcnic.setText("");
        
        clearTable();

    }//GEN-LAST:event_btnClearActionPerformed

    private void btnPatientReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientReportActionPerformed

        int row = tablePatient.getSelectedRow();
        if(row>=0)
        {
            String status = tablePatient.getValueAt(row, 5).toString();

            if(!status.equalsIgnoreCase("Report Available"))
            {
                JOptionPane.showMessageDialog(this, "Report is not Available at the moment. \n"
                        + "Only \"Report Available\" report can be printed");
                return;
            }
            String id[] = tablePatient.getValueAt(row, 0).toString().split("-");
            String order = tablePatient.getValueAt(row, 3).toString();
            PatientReportBO prbo= null;
            prbo = dam.getReport(order);
            String doctorInfo[] = dam.getDoctorInfo(prbo.getDoctorId()).split("###");
            if(doctorInfo.length==3)
            {
                prbo.setTitle1(doctorInfo[0]);
                prbo.setTitle2(doctorInfo[1]);
                prbo.setDegrees(doctorInfo[2]);
            }
            prbo.setName(dam.getDoctorName(prbo.getDoctorId()));
            prbo.setAddendum(dam.getAddendum(prbo.getReportId()));
            
            String masterId = dam.getMasterId(order);
            prbo.setHistory(dam.getHistory(masterId));
            PatientBO pbo = new PatientBO();

            pbo = dam.getPatientInformation(id[0],id[1], pbo);
//            dam.getPatientPicture(id[0],id[1]);
            Constants.profilePath=dam.get_profile_picture(id[0],id[1]);
            String patientInformation[] = new String[10];
            patientInformation[0] = pbo.getPatientId();
            patientInformation[1] = pbo.getName();
            patientInformation[2] = pbo.getFatherName();
            patientInformation[3] = pbo.getCnic();
            patientInformation[4] = pbo.getContactNum();
            patientInformation[5] = pbo.getGender();
            patientInformation[6] = pbo.getAddress();
            patientInformation[7] = pbo.getCity();
            patientInformation[8] = tablePatient.getValueAt(row, 4).toString();
            patientReport pr = new patientReport();
            pbo.setAge(Constants.calculateAge(pbo.getDob()));
            
            String[] demographics = new String[2];
            dam.getWeightHeightFromMaster(order,demographics);
            pbo.setWeight(demographics[0]);
            pbo.setHeight(demographics[1]);
            patientInformation[9] = dam.getCptCode(tablePatient.getValueAt(row, 3).toString());
            
            String path = pr.generateOrder(patientInformation,pbo,prbo);

            File pdf = new File(path);
            try {
                Desktop.getDesktop().open(pdf);
            } catch (IOException ex) {
//                Logger.getLogger(AdminReport.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        else
        {
            JOptionPane.showMessageDialog(this, "Please Select a Row First");
        }

    }//GEN-LAST:event_btnPatientReportActionPerformed

    private void btnCDDVDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCDDVDActionPerformed
        burnMedia();
    }//GEN-LAST:event_btnCDDVDActionPerformed

    private void tablePatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePatientMouseClicked
        
        if(evt.getClickCount()==2 ){
            int row = tablePatient.getSelectedRow();
            String orderid = tablePatient.getValueAt(row, 3).toString();
            if(row>=0)
            {
                String info[] = tablePatient.getValueAt(row, 0).toString().split("-");
                String studyPath = "";
                studyPath = dam.getStudyPath(info[1], orderid);

                String serverPath1 = Constants.primeryServer+studyPath;
                String serverPath2 = Constants.secondaryServer+studyPath;
                if(checkPathValidity(serverPath1))
                {
                    this.studyPath = serverPath1;
                }
                else if(checkPathValidity(serverPath2))
                {
                    this.studyPath = serverPath2;
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Unable to Find Images from Server. Please Contact PACS-Section for further Assistance", "Error Information", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String viewerPath = dam.getViewerPath();
                createProcessToOpenImage(viewerPath, this.studyPath);

            }
        }
    }//GEN-LAST:event_tablePatientMouseClicked

    private void searchPatient() {
        clearTable();
        viewMap = new HashMap<>();
        String arr[] = new String[2];
        arr = txtPatientID.getText().split("-");
        if(this.txtPatientID.getText().length()>0 || this.txtcnic.getText().length()>0 )
        {
            String status = Constants.status[0]+"','"+Constants.status[1]+"','"+Constants.status[2]+"','"+
                    Constants.status[3]+"','"+Constants.status[4]+"','"+Constants.status[5]+"','"+Constants.status[6];
            
            if(arr.length>1)
            dam.searchCptWisePatientOrderEMT(arr[0],arr[1],txtcnic.getText(),viewMap,status,"","","");
            else
            dam.searchCptWisePatientOrderEMT(arr[0],"",txtcnic.getText(),viewMap, status,"","","");
            if(viewMap.size()>0)
                fillTable(viewMap);
            
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Must Enter Patient ID, CNIC or Date For Search Patient.");
        }
    }

    private void clearTable() {
        this.tablePatient.clearSelection();
        DefaultTableModel dm = (DefaultTableModel)tablePatient.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged(); 
    }
    private void fillTable(HashMap<String, OrderEntryBO> viewMap) {
        ListSelectionModel lsm = this.tablePatient.getSelectionModel();
        lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //------------- Information Filled in table
        DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();
        
        for ( String key : viewMap.keySet()){
            OrderEntryBO pb = viewMap.get(key);
            String arr[] = {pb.getPatientLocationID()+"-"+pb.getPatientID(),pb.getPatientName(),pb.getOrderDateTime(),pb.getOrderID(),pb.getCptDesc(),Constants.statusMap.get(pb.getStatus())};
                model.addRow(arr);
            }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        tablePatient.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablePatient.getColumnModel().getColumn(0).setMaxWidth(100);
        tablePatient.getColumnModel().getColumn(3).setMaxWidth(100);
    }

    private void burnMedia() {
        if (checkPathValidity(Constants.viewerPath)) {
            if (checkPathValidity(Constants.burnMediaPath)) {
                int row=tablePatient.getSelectedRow();
                String patientId = tablePatient.getValueAt(row, 0).toString();
                String orderId = tablePatient.getValueAt(row,3).toString();
                String arr[] = patientId.split("\\-");
                String filePath =  dam.getStudyPath(arr[1], orderId);
                try {
                    
                   studyPath = verifyStudy(Constants.primeryServer,filePath);
                    
                   if(!studyPath.equalsIgnoreCase(""))
                   {
                    System.out.println(Constants.burnMediaPath + " " + studyPath + " " +Constants. viewerPath + " " + patientId);
                    Runtime.getRuntime().exec(Constants.burnMediaPath + " " + studyPath + " " + Constants.viewerPath + " " + patientId);
                   }
                   else
                   {
                       JOptionPane.showMessageDialog(this, "Study Not Found on any server.");
                       return;
                   }

                } catch (Exception ex) {
//                    Logger.getLogger(frmPacsWorkStationGeneral.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                // burnmedia fiLe check
                JOptionPane.showMessageDialog(this, "Burn Media File not exist at path " + Constants.burnMediaPath);
            }
        } else {
            //burnmedia viewer not exist check
            JOptionPane.showMessageDialog(this, " Viewer not exist at path " + Constants.viewerPath);
        }
    }
    
    
    public static boolean checkPathValidity(String filePath) {

        System.out.println("Checking Path validity: " + filePath);
        boolean flag = false; // assume: invalid path
        try {
            makeFile(filePath);
            flag = file.exists();
        } catch (Exception ex) {
            ex.printStackTrace();
            flag = false;
        }
        return flag;

    } 
    public static void makeFile(String fileName) {
        //System.out.println("Making File Path = " + fileName );
        file = new File(fileName);
    }

    private String getDate() {
        DatePicker dp = new DatePicker(this);
        if (dp.setPickedDate() != null && !dp.setPickedDate().equals("")) {
            return dp.setPickedDate();
        }
        else
        {
            return "";
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCDDVD;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnPatientReport;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablePatient;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtcnic;
    // End of variables declaration//GEN-END:variables

    private String verifyStudy(String primeryServer, String filePath) {
        String fullPath="";
        try {
            
            System.out.println(primeryServer);
            String servers[] = primeryServer.split("\\^");
            if(servers.length>0)
            {
                for (String server : servers) {
                    fullPath = server + filePath;
                    File file = new File(fullPath);
                    System.out.println(file.getAbsoluteFile());
                    if (file.canRead()) 
                    {
                        File[] images = file.listFiles();
                        if (images.length > 0) 
                        {
                            System.out.println("Study Found.... ");
                            File dest = new File("D:\\Temp\\A");
//                            dest.
                            FileUtils.deleteDirectory(dest);
                            dest.mkdirs();
                            FileUtils.copyDirectory(file, dest);
                            fullPath = dest.getAbsolutePath();
                            return fullPath;
                        }
                    }
                    
                    else
                    {
                        System.out.println("file doesnt exist");
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
    }
        return "";
    }
    
    
    public void createProcessToOpenImage(String viewer, String studyPath) {
        try {
            System.out.println("Viewer     = '" + viewer + "'");
            System.out.println("StudyPath  = '" + studyPath + "'");

            System.out.println("Final Command = " + viewer +   " "+studyPath);
            ProcessBuilder pb = new ProcessBuilder(viewer,  studyPath);
            pb.redirectErrorStream(true);
            Process p = pb.start();
            System.out.println("Command executed successfully.\nReturning succesfully after launching viewer to display images.");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
