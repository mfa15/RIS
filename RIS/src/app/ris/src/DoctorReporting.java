package app.ris.src;

import app.ris.bo.Constants;
import app.ris.bo.ModalityBO;
import app.ris.bo.OrderEntryBO;
import app.ris.bo.PatientReportBO;
import app.ris.bo.TemplateBO;
import app.ris.dam.dam;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.LinkedHashMap;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
//import com.inet.jortho.SpellChecker;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
public class DoctorReporting extends javax.swing.JInternalFrame {

    LinkedHashMap<String, OrderEntryBO> viewMap = new LinkedHashMap<String, OrderEntryBO>();
    HashMap<String, OrderEntryBO> pendingPatientMap = new HashMap<String, OrderEntryBO>();
    LinkedHashMap<String, OrderEntryBO> reportedPatientMap = new LinkedHashMap<String, OrderEntryBO>();
    HashMap<String, TemplateBO> templateMap = new HashMap<String, TemplateBO>();
    LinkedHashMap<String, ModalityBO> modalityMap = new LinkedHashMap<String, ModalityBO>();
    dam dam = new dam();
    OrderEntryBO value;
    int patientID = 0;
    String info[] = new String[2];
    String orderid = "";

    /**
     * Creates new form reportingForm
     */
    public DoctorReporting() {
        initComponents();
//        txtReport.setContentType("text/html");
//        txtImpression.setContentType("text/html");

//        SpellChecker.setUserDictionaryProvider(new FileUserDictionary());
//        SpellChecker.registerDictionaries(this.getClass().getResource("/dictionary"), "en");
//        SpellChecker.register(txtReport);
//        SpellChecker.register(txtImpression);
        Dimension desktopSize = Constants.pane1.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width) / 2,
                (desktopSize.height - jInternalFrameSize.height) / 2);

        dam.getTemplateInformation(templateMap);
        if (templateMap.size() > 0) {
            fillTemplateCombo();
        }
        this.setVisible(true);
        this.getPendingRecord();

        cmbTemplates.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int row = tablePatient.getSelectedRow();
                if (row >= 0) {
                    String templateName = cmbTemplates.getSelectedItem().toString();
                    for (String key : templateMap.keySet()) {
                        TemplateBO tbo = templateMap.get(key);
                        {
                            if (tbo.getName().equalsIgnoreCase(templateName)) {
                                txtReport.setText(tbo.getResult());
                                txtImpression.setText(tbo.getImpression());
                                return;
                            }
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please Select a Row before selecting a Template");
                    return;
                }
            }
        });
        fillFindingLov();
        fillModalityLov();
        AutoCompleteDecorator.decorate(cmbTemplates);
        AutoCompleteDecorator.decorate(cmbModality);
    }

    private void fillModalityLov() {

        modalityMap = new LinkedHashMap<String, ModalityBO>();
        dam.getModality(modalityMap);
        cmbModality.removeAllItems();
        cmbModality.addItem("All");
        if (modalityMap.size() > 0) {
            for (String key : modalityMap.keySet()) {
                ModalityBO mbo = modalityMap.get(key);
                if (mbo.getActive().equalsIgnoreCase("Y")) {
                    cmbModality.addItem(mbo.getModality());
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextPane1 = new javax.swing.JTextPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePatient = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtReport = new javax.swing.JTextPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        previousReport = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        btnSavereport = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        btnFinalSign = new javax.swing.JButton();
        btnSavereport1 = new javax.swing.JButton();
        txtcnic = new javax.swing.JTextField();
        txtToDate = new com.toedter.calendar.JDateChooser();
        txtFromDate = new com.toedter.calendar.JDateChooser();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableReportedPatient = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtHistory = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtImpression = new javax.swing.JTextPane();
        jLabel8 = new javax.swing.JLabel();
        cmbTemplates = new javax.swing.JComboBox<>();
        cmbModality = new javax.swing.JComboBox<>();
        jPanel9 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cmbFindings = new javax.swing.JComboBox<>();
        chkUrgent = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Patient ID");

        txtPatientID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPatientIDKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Modality");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Date(From)");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Date(To)");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("CNIC");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Pending Results");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Reporting Panel");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Information"));

        tablePatient.setAutoCreateRowSorter(true);
        tablePatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient_ID", "Name", "Age/Gender", "Date", "Order_ID", "CPT Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablePatient.getTableHeader().setReorderingAllowed(false);
        tablePatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePatientMouseClicked(evt);
            }
        });
        tablePatient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablePatientKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablePatient);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Report"));

        jScrollPane7.setViewportView(txtReport);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Previous Report"));

        previousReport.setEditable(false);
        previousReport.setColumns(20);
        previousReport.setRows(5);
        jScrollPane4.setViewportView(previousReport);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnSavereport.setText("Save Report");
        btnSavereport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavereportActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 0, 0));
        jButton4.setText("Exit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        btnFinalSign.setText("Final Sign");
        btnFinalSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalSignActionPerformed(evt);
            }
        });

        btnSavereport1.setText("View Attached Reports");
        btnSavereport1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavereport1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSavereport1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSavereport)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFinalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSavereport)
                    .addComponent(btnClear)
                    .addComponent(jButton4)
                    .addComponent(btnFinalSign, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSavereport1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtcnic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcnicKeyPressed(evt);
            }
        });

        txtToDate.setToolTipText("2017-12-25");
        txtToDate.setDate(null
        );
        txtToDate.setDateFormatString("yyyy-MM-dd");

        txtFromDate.setToolTipText("2017-12-25");
        txtFromDate.setDate(null);
        txtFromDate.setDateFormatString("yyyy-MM-dd");

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Previous Reports"));

        tableReportedPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient_ID", "Name", "Date", "Order_ID", "CPT Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableReportedPatient.getTableHeader().setReorderingAllowed(false);
        tableReportedPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableReportedPatientMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableReportedPatient);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient History"));

        txtHistory.setColumns(20);
        txtHistory.setRows(5);
        jScrollPane3.setViewportView(txtHistory);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Impression"));

        jScrollPane2.setViewportView(txtImpression);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
        );

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Report Templates:");

        cmbTemplates.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select" }));

        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("*Findings:");

        cmbFindings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Normal", "Abnormal", "Referred" }));
        cmbFindings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFindingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbFindings, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cmbFindings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        chkUrgent.setText("Urgent Only");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtcnic, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(cmbModality, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkUrgent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbTemplates, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtPatientID)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtcnic, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 9, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmbModality, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSearch)
                                    .addComponent(chkUrgent))
                                .addGap(0, 9, Short.MAX_VALUE)))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTemplates, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablePatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePatientMouseClicked
        String history = "";
        String report = "";
        String viewer = dam.getViewerPath();

        if (evt.getClickCount() == 2) {
            String studyPath = "";
            studyPath = dam.getStudyPath(info[1], orderid);

            String serverPath1 = Constants.primeryServer + studyPath;
            String serverPath2 = Constants.secondaryServer + studyPath;
            File file1 = new File(serverPath1);
            File file2 = new File(serverPath1);
            if (file1.exists()) {
                this.createProcessToOpenImage(viewer, serverPath1);
            } else if (file2.exists()) {
                this.createProcessToOpenImage(viewer, serverPath2);
            } else {
                JOptionPane.showMessageDialog(this, "Unable to Open Images from Server. Please Contact PACS-Section for further Assistance", "Error Information", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            kepPress();
        }

    }//GEN-LAST:event_tablePatientMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
//        Constants.bgFrame.show();
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchPatient();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void searchPatient() {
        clearTable();
        clearReportedTable();
        String urgent = "";
        if (chkUrgent.isSelected()) {
            urgent = "Y";
        } else {
            urgent = "";
        }

        viewMap = new LinkedHashMap<>();
        String arr[] = new String[2];
        arr = txtPatientID.getText().split("-");

        SimpleDateFormat simpledatafo = new SimpleDateFormat("yyyy-MM-dd");
        String expectedToDate = "", expectedFromDate = "";
        try {
            expectedToDate = simpledatafo.format(txtToDate.getDate());
        } catch (NullPointerException e) {
            expectedToDate = "";
        }
        try {
            expectedFromDate = simpledatafo.format(txtFromDate.getDate());
        } catch (NullPointerException e) {
            expectedFromDate = "";
        }
        if (expectedFromDate.length() > 0 && expectedToDate.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Must Enter To Date field.");
        } else if (expectedToDate.length() > 0 && expectedFromDate.length() <= 0) {
            JOptionPane.showMessageDialog(this, "Must Enter From Date field.");
        } else {
            if (arr.length > 1) {
                dam.searchPatientWithUrgentTag(arr[0], arr[1], txtcnic.getText(), viewMap, Constants.status[3] + "','" + Constants.status[4], "", expectedFromDate, expectedToDate, urgent);
            } else {
                dam.searchPatientWithUrgentTag(arr[0], "", txtcnic.getText(), viewMap, Constants.status[3] + "','" + Constants.status[4], "", expectedFromDate, expectedToDate, urgent);
            }
            if (viewMap.size() > 0) {
                fillTable(viewMap);
            } else {
                JOptionPane.showMessageDialog(this, "No Record Found. Kindly Modify Search Criteria.");
            }
        }
    }

    private void btnSavereportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavereportActionPerformed

        int row = tablePatient.getSelectedRow();
        if (row >= 0) {
            if (saveReport()) {
                JOptionPane.showMessageDialog(this, "Report Saved Successfully");
                this.clear();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Select a Row before Saving Information");
        }
    }//GEN-LAST:event_btnSavereportActionPerformed

    private void btnFinalSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalSignActionPerformed

        int row = tablePatient.getSelectedRow();
        if (row >= 0) {
            int optionSelection = JOptionPane.showConfirmDialog(this, "Are you sure you want to Final Sign this Report? ", "Confirmation", JOptionPane.YES_NO_CANCEL_OPTION);
            if (optionSelection == JOptionPane.YES_OPTION) {
                if (saveReport()) {
                    if (dam.getFinalSignInfo(Constants.employeeID).equalsIgnoreCase("Y")) {
                        String findings = cmbFindings.getSelectedItem().toString();
                        if (!findings.equalsIgnoreCase("-")) {
                            if (dam.finalSign(this.orderid, Constants.status[5], findings)) {
                                JOptionPane.showMessageDialog(null, "Report Final Signed.");
                                this.clear();
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Findings is Mandatory. Please fill Findings.");
                            return;
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Report Draft Saved. User is Unauthorized to Final Sign Report(s)");
                    }
                }

            }
        } else {
            JOptionPane.showMessageDialog(this, "Please Select a patient before Final Sign");
        }
    }//GEN-LAST:event_btnFinalSignActionPerformed

    private void txtPatientIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientIDKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchPatient();
        }
    }//GEN-LAST:event_txtPatientIDKeyPressed

    private void txtcnicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcnicKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchPatient();
        }
    }//GEN-LAST:event_txtcnicKeyPressed

    private void tableReportedPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableReportedPatientMouseClicked
        tablePatient.clearSelection();
        if (evt.getClickCount() == 2) {
            //---------- Open Images
            String viewerPath = dam.getViewerPath();
            String studyPath = dam.getStudyPath(info[1], orderid);

            String serverPath1 = Constants.primeryServer + studyPath;
            String serverPath2 = Constants.secondaryServer + studyPath;
            File file1 = new File(serverPath1);
            File file2 = new File(serverPath1);
            if (file1.exists()) {
                this.createProcessToOpenImage(viewerPath, serverPath1);
            } else if (file2.exists()) {
                this.createProcessToOpenImage(viewerPath, serverPath2);
            } else {
                JOptionPane.showMessageDialog(this, "Unable to Open Images from Server. Please Contact PACS-Section for further Assistance", "Error Information", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            //-------- get and show reports
            int row = tableReportedPatient.getSelectedRow();
            if (row >= 0) {
//                this.txtReport.setText("");
//                this.previousReport.setText("");
//                this.txtHistory.setText("");
                info = tableReportedPatient.getValueAt(row, 0).toString().split("-");
                orderid = tableReportedPatient.getValueAt(row, 4).toString();
                String masterId = dam.getMasterId(orderid);
                String history = dam.getHistory(masterId);
                if (history.length() > 0) {
                    history = ("History:\n" + history + "\n");
                }

                PatientReportBO prbo = null;
                prbo = dam.getReport(tableReportedPatient.getValueAt(row, 4).toString());
                if (prbo.getResult() != null && prbo.getResult().length() > 0) {

                    String res = prbo.getResult().replace("</html>", "").replace("</body>", "");
                    String imp = prbo.getImpression().replaceFirst("<html>", "").replace("<body>", "");
                    System.out.println(res + "\n--------------" + imp);
                    String rep = "<br><b>Result: </b>" + res + "<br><b>Impression:</b>" + imp;
//                    String imp = ";

                    this.previousReport.setText(history + rep + imp);
//                    ekitCore3.setDocumentText(history + rep);
                }

//                String report = dam.getReport(info[0], orderid);
//                if(report.length()>0)
//                {
//                    String data[] = report.split("######");
//                    String rep = "Result: \n"+data[0]+"\n";
//                    String imp = "Impression:\n"+data[1]+"\n";
//
//                    this.previousReport.setText(history + rep+imp);
//                }
            }
        }
    }//GEN-LAST:event_tableReportedPatientMouseClicked

    private void tablePatientKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablePatientKeyReleased
        kepPress();
    }//GEN-LAST:event_tablePatientKeyReleased

    private void btnSavereport1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavereport1ActionPerformed

        int row = tablePatient.getSelectedRow();
        if (row >= 0) {
            try {
                //            Constants.pane1.removeAll();
                //            Constants.pane1.repaint();

                try {
                    if (Constants.webcam != null || Constants.webcam.open()) {
                        Constants.webcam.close();
                    }
                } catch (Exception e) {
                }
                this.hide();
                ViewReports reg = new ViewReports(tablePatient.getValueAt(row, 0).toString());
                reg.regObj = this;
                BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
                Container north = (Container) ui.getNorthPane();
                north.remove(0);
                north.validate();
                north.repaint();
                Constants.pane1.add(reg);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a patient first");
        }
    }//GEN-LAST:event_btnSavereport1ActionPerformed

    private void cmbFindingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFindingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFindingsActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DoctorReporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DoctorReporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DoctorReporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DoctorReporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new DoctorReporting().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnFinalSign;
    private javax.swing.JButton btnSavereport;
    private javax.swing.JButton btnSavereport1;
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox chkUrgent;
    private javax.swing.JComboBox<String> cmbFindings;
    private javax.swing.JComboBox<String> cmbModality;
    private javax.swing.JComboBox<String> cmbTemplates;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextArea previousReport;
    private javax.swing.JTable tablePatient;
    private javax.swing.JTable tableReportedPatient;
    private com.toedter.calendar.JDateChooser txtFromDate;
    private javax.swing.JTextArea txtHistory;
    private javax.swing.JTextPane txtImpression;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextPane txtReport;
    private com.toedter.calendar.JDateChooser txtToDate;
    private javax.swing.JTextField txtcnic;
    // End of variables declaration//GEN-END:variables

    public void createProcessToOpenImage(String viewer, String studyPath) {
        try {
            viewer = viewer.replaceAll("#", " ");
            System.out.println("Viewer     = '" + viewer + "'");
            System.out.println("StudyPath  = '" + studyPath + "'");

            System.out.println("Final Command = " + viewer + studyPath);
            ProcessBuilder pb = new ProcessBuilder(viewer, studyPath);
            pb.redirectErrorStream(true);
            Process p = pb.start();
            System.out.println("Command executed successfully.\nReturning succesfully after launching viewer to display images.");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
//--------------------------------------------------------------------------------------

    private void clearTable() {
        this.tablePatient.clearSelection();
        DefaultTableModel dm = (DefaultTableModel) tablePatient.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged();
    }

    private void clearReportedTable() {
        this.tableReportedPatient.clearSelection();
        DefaultTableModel dm = (DefaultTableModel) tableReportedPatient.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged();
    }
//---------------------------------------------------------

    private void fillTable(HashMap<String, OrderEntryBO> viewMap) {
        ListSelectionModel lsm = this.tablePatient.getSelectionModel();
        lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //------------- Information Filled in table
        DefaultTableModel model = (DefaultTableModel) tablePatient.getModel();

        for (String key : viewMap.keySet()) {
            OrderEntryBO pb = viewMap.get(key);
            String arr[] = {pb.getPatientLocationID() + "-" + pb.getPatientID(), pb.getPatientName(), pb.getAgeGender(), pb.getOrderDateTime(), pb.getOrderID(), pb.getCptDesc()};
            model.addRow(arr);

        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        tablePatient.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablePatient.getColumnModel().getColumn(0).setMaxWidth(100);
        tablePatient.getColumnModel().getColumn(3).setMaxWidth(100);
    }
//-------------------------------------------------------------------------

    public void getPendingRecord() {
        dam.getCptWisePatientOrders(pendingPatientMap, Constants.status[3] + "','" + Constants.status[4]);
        if (pendingPatientMap.size() > 0) {
            fillTable(pendingPatientMap);
        }
    }
    //-----------------------------------------------

    public void clear() {
        cmbFindings.setSelectedIndex(0);
        tablePatient.selectAll();
        cmbTemplates.setSelectedIndex(0);
        this.txtPatientID.setText("");
        this.txtcnic.setText("");
        txtFromDate.setDate(null);
        txtToDate.setDate(null);
        this.txtReport.setText("");
        this.previousReport.setText("");
        this.txtHistory.setText("");
        pendingPatientMap.clear();
        viewMap.clear();
        this.txtImpression.setText("");
        cmbModality.setSelectedIndex(0);

        clearTable();
        clearReportedTable();
        this.getPendingRecord();
    }

    private boolean saveReport() {
        boolean flag = false;
        if (this.txtReport.getText().length() > 0 && this.txtImpression.getText().length() > 0) {
            if (dam.insertHistory(txtHistory.getText(), dam.getMasterId(this.orderid))) {
                if (dam.saveReport(info[0], this.orderid, this.txtReport.getText(), this.txtImpression.getText())) {
                    dam.updateDetailStatus(this.orderid, Constants.status[4]);
                    flag = true;

                }
            } else {
                JOptionPane.showMessageDialog(this, "Unable to Update Patient History. Please try again Later");
                flag = false;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nothing to Save, Please enter patient Report and Impression");
            flag = false;
        }
        return flag;
    }

    private void fillReportedTable() {
        ListSelectionModel lsm = this.tableReportedPatient.getSelectionModel();
        lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //------------- Information Filled in table
        DefaultTableModel model = (DefaultTableModel) tableReportedPatient.getModel();

        for (String key : reportedPatientMap.keySet()) {
            OrderEntryBO pb = reportedPatientMap.get(key);
            String arr[] = {pb.getPatientLocationID() + "-" + pb.getPatientID(), pb.getPatientName(), pb.getOrderDateTime(), pb.getOrderID(), pb.getCptDesc()};
            model.addRow(arr);
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        tablePatient.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablePatient.getColumnModel().getColumn(0).setMaxWidth(100);
        tablePatient.getColumnModel().getColumn(3).setMaxWidth(100);

    }

    private void fillTemplateCombo() {
        cmbTemplates.removeAllItems();
        for (String key : templateMap.keySet()) {
            TemplateBO tbo = templateMap.get(key);
            {
                cmbTemplates.addItem(tbo.getName());
            }
        }

    }

    private void kepPress() {
        clearReportedTable();
        reportedPatientMap = new LinkedHashMap<>();
        int row = tablePatient.getSelectedRow();
        if (row >= 0) {
            this.txtReport.setText("");
            this.txtImpression.setText("");
            this.txtHistory.setText("");
            info = tablePatient.getValueAt(row, 0).toString().split("-");
            orderid = tablePatient.getValueAt(row, 4).toString();
            String masterId = dam.getMasterId(orderid);
            String history = dam.getHistory(masterId);
            if (history.length() > 0) {
                txtHistory.setText(history);
            }
//                String report = dam.getReport(info[0], orderid);
//                if(report.length()>0)
//                {
//                    String data[] = report.split("######");
//                    this.txtReport.setText(data[0]);
//                    this.txtImpression.setText(data[1]);
//                }
            PatientReportBO prbo = null;
            prbo = dam.getReport(tablePatient.getValueAt(row, 4).toString());
            try {
                if (prbo.getResult().length() > 0) {
//                        ekitCore.setDocumentText(prbo.getResult());
//                        ekitCore2.setDocumentText(prbo.getImpression());
                    this.txtReport.setText(prbo.getResult());
                    this.txtImpression.setText(prbo.getImpression());
                }
            } catch (java.lang.NullPointerException ex) {
            }

            //--------------------------------------------------//
            //      get previous records and show               //
            //--------------------------------------------------//
//                dam.searchreportPatient(info[0], info[1], "", "", "","All" ,reportedPatientMap, "5");
            dam.searchCptWisePatientOrder(info[0], info[1], "", reportedPatientMap, Constants.status[5], "", "", "");
            previousReport.setText("");
            if (reportedPatientMap.size() > 0) {
                fillReportedTable();
            }

        }
    }

    private void fillFindingLov() {
        cmbFindings.removeAllItems();
        for (String s : Constants.findingList) {
            cmbFindings.addItem(s);
        }
    }
}
