/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.ris.src;

import app.ris.bo.Constants;
import app.ris.bo.LocationBO;
import app.ris.dam.dam;
import app.ris.reporting.MonthlyGraphReport;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author faizan ahmed
 */
public class ReportedDataAnalysis extends javax.swing.JInternalFrame {

    /**
     * Creates new form ReportedDataAnalysis
     */
    Refresh r;
    long monthDays=0;
    LinkedHashMap<String,String> lhm = new LinkedHashMap<String,String>();
    LinkedHashMap<String, String> today = new LinkedHashMap<>();
    LinkedHashMap<String, String> currentWeek = new LinkedHashMap<>();
    LinkedHashMap<String, String> lastWeek = new LinkedHashMap<>();
    LinkedHashMap<String, String> currentMonth = new LinkedHashMap<>();
    LinkedHashMap<String, String> lastMonth = new LinkedHashMap<>();
    LinkedHashMap<String, String> total = new LinkedHashMap<>();
    LinkedHashMap<Integer,LinkedHashMap<String,String>> monthWiseLocationData = new LinkedHashMap<>();
    dam d = new dam();
    String[] months;
    public ReportedDataAnalysis() {
        initComponents();
        this.setVisible(true);
        Dimension desktopSize = Constants.pane1.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width)/2,
            (desktopSize.height- jInternalFrameSize.height)/2);
       
       lhm.clear();
       if(Constants.locationMap.size()>0)
       {
           for(String key:Constants.locationMap.keySet())
           {
               LocationBO lbo = Constants.locationMap.get(key);
               if(lbo.getActive().equals("Y"))
                    lhm.put(key,lbo.getName());
           }
       }
       
       r =new Refresh();
       r.start();
       
       LocalDate now = LocalDate.now(); // 2015-11-24
       LocalDate earlier = now.minusMonths(1); // 2015-10-24
       monthDays = earlier.lengthOfMonth();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAnalysis = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Reported Data Analysis");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Reported Data"));

        tableAnalysis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Location", "Today's Count", "Current Week's Count", "Last Week's Count", "Current Month's Count", "Last Month's Count", "Last Month's Daily Average", "Total Count"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableAnalysis);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 447, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnExit.setBackground(new java.awt.Color(255, 0, 0));
        btnExit.setText("Exit");
        btnExit.setActionCommand("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jButton1.setText("Location Wise Monthly Graph");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(jButton1))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 924, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        //        Constants.bgFrame.show();
        if(r.isAlive())
        {
            try { 
                r.flag=false;
                r.interrupt();
                r.join();
            } catch (InterruptedException ex) {
                r.interrupt();
//                Logger.getLogger(ReportedDataAnalysis.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed


        LocalDate now = LocalDate.now(); // 2015-11-24
        months = new String[12];
        for(int i=11;i>=0;i--)
        {
            LocalDate temp = now.minusMonths(i);
            
            months[i] = temp.getMonth().toString().substring(0, 3)+"-"+String.valueOf(temp.getYear()).substring(2);
            System.out.println(months[i]);
            
            monthWiseLocationData.put(i, d.getMothWiseData(i));
        }
        
        MonthlyGraphReport mgr = new MonthlyGraphReport();
        String filePath =mgr.build(months,monthWiseLocationData);
        try {
                    File pdf = new File(filePath);
                    Desktop.getDesktop().open(pdf);
                } catch (IOException ex) {
                    Logger.getLogger(OrderEntryMultipleCpts.class.getName()).log(Level.SEVERE, null, ex);
                }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableAnalysis;
    // End of variables declaration//GEN-END:variables

    private void fillTable() {
        clearTable();
        
        d.getDataToday(today);
        d.getCurrentWeek(currentWeek);
        d.lastWeekCount(lastWeek);
        d.getCurrentMonth(currentMonth);
        d.getLastMonth(lastMonth);
        d.getTotal(total);
        tableValuesChanged();
    }

    private void clearTable() {
        tableAnalysis.clearSelection();
        today.clear();
        currentWeek.clear();
        lastWeek.clear();
        currentMonth.clear();
        lastMonth.clear();
        total.clear();
        DefaultTableModel dm = (DefaultTableModel)tableAnalysis.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged(); 
    }

    private void tableValuesChanged() {
        ListSelectionModel lsm = this.tableAnalysis.getSelectionModel();
        lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //------------- Information Filled in table
        DefaultTableModel model = (DefaultTableModel) tableAnalysis.getModel();
        for(String key : lhm.keySet())
        {
            String value = lhm.get(key);
            String today = nullToZero(this.today.get(key));
            String cWeek = nullToZero(currentWeek.get(key));
            String lWeek = nullToZero(lastWeek.get(key));
            String cMonth = nullToZero(currentMonth.get(key));
            String lMonth = nullToZero(lastMonth.get(key));
            long avg = Long.valueOf(lMonth)/monthDays;
            String total = nullToZero(this.total.get(key));
            Object arr[] = {value,today,cWeek,lWeek,cMonth,lMonth,avg,total};
            model.addRow(arr);
        
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private String nullToZero(String get) {
        if(get==null)
            return "0";
        else
            return get;
    }
    
    public class Refresh extends Thread
    {
        boolean flag=true;
        public void refreshTable()
        {
            fillTable();
        }
        @Override
        public void run()
        {
            while(flag)
            {
                try {
                    refreshTable();
                    sleep(60000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ReportedDataAnalysis.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

}
