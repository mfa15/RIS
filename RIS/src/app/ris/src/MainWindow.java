package app.ris.src;

import app.ris.bo.Constants;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.border.Border;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    Dimension scrnSize=null;
    int taskBarHeight=0;
    public MainWindow() {
        initComponents();
        scrnSize = Toolkit.getDefaultToolkit().getScreenSize();
        Rectangle winSize = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
        
        taskBarHeight = scrnSize.height - winSize.height;
        this.setSize(scrnSize.width, scrnSize.height-taskBarHeight);
        

        setRoleWiseMenus();
//        setImage();
        setBackGroundImage();
        addPane();
        Constants.pane1 = pane;
        
    }

    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        jMenuItem2 = new javax.swing.JMenuItem();
        pane = new javax.swing.JDesktopPane();
        mainPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        reg = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        empReg = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        rep = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        order = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        tech = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        coun = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        dcmDir = new javax.swing.JMenuItem();
        jSeparator15 = new javax.swing.JPopupMenu.Separator();
        add = new javax.swing.JMenuItem();
        jSeparator16 = new javax.swing.JPopupMenu.Separator();
        repo = new javax.swing.JMenuItem();
        jSeparator17 = new javax.swing.JPopupMenu.Separator();
        pic = new javax.swing.JMenuItem();
        jSeparator23 = new javax.swing.JPopupMenu.Separator();
        attachedReport = new javax.swing.JMenuItem();
        jSeparator24 = new javax.swing.JPopupMenu.Separator();
        viewAttachedReports = new javax.swing.JMenuItem();
        jSeparator14 = new javax.swing.JPopupMenu.Separator();
        thumb = new javax.swing.JMenuItem();
        jSeparator13 = new javax.swing.JPopupMenu.Separator();
        jMenuItem6 = new javax.swing.JMenuItem();
        jSeparator11 = new javax.swing.JPopupMenu.Separator();
        setupMenu = new javax.swing.JMenu();
        setup = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        template = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        cpt = new javax.swing.JMenuItem();
        jSeparator12 = new javax.swing.JPopupMenu.Separator();
        price = new javax.swing.JMenuItem();
        jSeparator10 = new javax.swing.JPopupMenu.Separator();
        chngPass = new javax.swing.JMenuItem();
        jSeparator18 = new javax.swing.JPopupMenu.Separator();
        item = new javax.swing.JMenuItem();
        jSeparator19 = new javax.swing.JPopupMenu.Separator();
        stock = new javax.swing.JMenuItem();
        jSeparator22 = new javax.swing.JPopupMenu.Separator();
        jMenu2 = new javax.swing.JMenu();
        adminReports = new javax.swing.JMenuItem();
        jSeparator20 = new javax.swing.JPopupMenu.Separator();
        menuStatus = new javax.swing.JMenuItem();
        jSeparator21 = new javax.swing.JPopupMenu.Separator();
        analysis = new javax.swing.JMenuItem();
        jSeparator26 = new javax.swing.JPopupMenu.Separator();
        summaryReports = new javax.swing.JMenuItem();
        jSeparator25 = new javax.swing.JPopupMenu.Separator();
        menuReferringPhysician = new javax.swing.JMenu();
        mnuRef = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem3.setText("jMenuItem3");

        jMenuItem5.setText("jMenuItem5");

        jMenuItem13.setText("jMenuItem13");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 794, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 429, Short.MAX_VALUE)
        );

        pane.setLayer(mainPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout paneLayout = new javax.swing.GroupLayout(pane);
        pane.setLayout(paneLayout);
        paneLayout.setHorizontalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        paneLayout.setVerticalGroup(
            paneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenu1.setText("Menu");

        reg.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        reg.setText("Patient Registration");
        reg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regActionPerformed(evt);
            }
        });
        jMenu1.add(reg);
        jMenu1.add(jSeparator2);

        empReg.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_MASK));
        empReg.setText("Employee Registration");
        empReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empRegActionPerformed(evt);
            }
        });
        jMenu1.add(empReg);
        jMenu1.add(jSeparator1);

        rep.setText("Pending Results");
        rep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repActionPerformed(evt);
            }
        });
        jMenu1.add(rep);
        jMenu1.add(jSeparator3);

        order.setText("Order Entry");
        order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderActionPerformed(evt);
            }
        });
        jMenu1.add(order);
        jMenu1.add(jSeparator4);

        tech.setText("Tech Acknowledge");
        tech.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                techActionPerformed(evt);
            }
        });
        jMenu1.add(tech);
        jMenu1.add(jSeparator5);

        coun.setText("Counter Acknowledge");
        coun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                counActionPerformed(evt);
            }
        });
        jMenu1.add(coun);
        jMenu1.add(jSeparator9);

        dcmDir.setText("DICOM Directory");
        dcmDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dcmDirActionPerformed(evt);
            }
        });
        jMenu1.add(dcmDir);
        jMenu1.add(jSeparator15);

        add.setText("Addendum");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });
        jMenu1.add(add);
        jMenu1.add(jSeparator16);

        repo.setText("Reports");
        repo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repoActionPerformed(evt);
            }
        });
        jMenu1.add(repo);
        jMenu1.add(jSeparator17);

        pic.setText("Capture Patient Pictures");
        pic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                picActionPerformed(evt);
            }
        });
        jMenu1.add(pic);
        jMenu1.add(jSeparator23);

        attachedReport.setText("Attach Reports");
        attachedReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachedReportActionPerformed(evt);
            }
        });
        jMenu1.add(attachedReport);
        jMenu1.add(jSeparator24);

        viewAttachedReports.setText("View Attached Reports");
        viewAttachedReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAttachedReportsActionPerformed(evt);
            }
        });
        jMenu1.add(viewAttachedReports);
        jMenu1.add(jSeparator14);

        thumb.setText("Capture Thumb Scan");
        thumb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thumbActionPerformed(evt);
            }
        });
        jMenu1.add(thumb);
        jMenu1.add(jSeparator13);

        jMenuItem6.setText("Exit");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);
        jMenu1.add(jSeparator11);

        jMenuBar1.add(jMenu1);

        setupMenu.setText("Setup");

        setup.setText("Setup");
        setup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupActionPerformed(evt);
            }
        });
        setupMenu.add(setup);
        setupMenu.add(jSeparator6);

        template.setText("Report Templates");
        template.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                templateActionPerformed(evt);
            }
        });
        setupMenu.add(template);
        setupMenu.add(jSeparator8);

        cpt.setText("CPT Definition");
        cpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cptActionPerformed(evt);
            }
        });
        setupMenu.add(cpt);
        setupMenu.add(jSeparator12);

        price.setText("CPT Wise Price");
        price.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceActionPerformed(evt);
            }
        });
        setupMenu.add(price);
        setupMenu.add(jSeparator10);

        chngPass.setText("Change Password");
        chngPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chngPassActionPerformed(evt);
            }
        });
        setupMenu.add(chngPass);
        setupMenu.add(jSeparator18);

        item.setText("Items");
        item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemActionPerformed(evt);
            }
        });
        setupMenu.add(item);
        setupMenu.add(jSeparator19);

        stock.setText("Stock Consumption");
        stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockActionPerformed(evt);
            }
        });
        setupMenu.add(stock);
        setupMenu.add(jSeparator22);

        jMenuBar1.add(setupMenu);

        jMenu2.setText("Reports");

        adminReports.setText("Admin Reports");
        adminReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminReportsActionPerformed(evt);
            }
        });
        jMenu2.add(adminReports);
        jMenu2.add(jSeparator20);

        menuStatus.setText("Status Reports");
        menuStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuStatusActionPerformed(evt);
            }
        });
        jMenu2.add(menuStatus);
        jMenu2.add(jSeparator21);

        analysis.setText("Performed Scans Data Analysis");
        analysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analysisActionPerformed(evt);
            }
        });
        jMenu2.add(analysis);
        jMenu2.add(jSeparator26);

        summaryReports.setText("Summary Reports");
        summaryReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryReportsActionPerformed(evt);
            }
        });
        jMenu2.add(summaryReports);
        jMenu2.add(jSeparator25);

        jMenuBar1.add(jMenu2);

        menuReferringPhysician.setText("Referring Physician");

        mnuRef.setText("Add Physician");
        mnuRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRefActionPerformed(evt);
            }
        });
        menuReferringPhysician.add(mnuRef);

        jMenuBar1.add(menuReferringPhysician);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pane)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pane)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void regActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regActionPerformed

        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            
            Constants.bgFrame.hide();
            pane.removeAll();
            pane.repaint();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }

            PatientRegistrationForm r = new PatientRegistrationForm();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) r.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(r);
            Constants.obj = r;
            setImage();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_regActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        try {
            if (Constants.webcam != null || Constants.webcam.open()) {
                Constants.webcam.close();
            }
        } catch (Exception e) {
        }
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void repActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            DoctorReporting r = new DoctorReporting();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) r.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(r);
            Constants.obj=r;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_repActionPerformed

    private void empRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empRegActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            EmployeeRegistration r = new EmployeeRegistration();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) r.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(r);
            Constants.obj = r;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_empRegActionPerformed

    private void orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            Constants.bgFrame.hide();
            try {
                pane.removeAll();
            pane.repaint();
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            OrderEntryMultipleCpts reg = new OrderEntryMultipleCpts();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj=reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_orderActionPerformed

    private void techActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_techActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try{
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            TechAcknowledge reg = new TechAcknowledge();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj=reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_techActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            ReportAdendum reg = new ReportAdendum();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj=reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_addActionPerformed

    private void repoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repoActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            ReportPrinting reg = new ReportPrinting();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj = reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_repoActionPerformed

    private void counActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_counActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            CounterAck reg = new CounterAck();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj = reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_counActionPerformed

    private void picActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_picActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }

            Thread thread = new Thread() {
                public void run() {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                    CapturePicture reg = new CapturePicture("");

                    BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
                    Container north = (Container) ui.getNorthPane();
                    north.remove(0);
                    north.validate();
                    north.repaint();
                    pane.add(reg);
                    Constants.obj = reg;
                    setCursor(Cursor.getDefaultCursor());
                }
            };

            thread.start();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_picActionPerformed

    private void thumbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thumbActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            FingerPrint reg = new FingerPrint();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj = reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_thumbActionPerformed

    private void dcmDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dcmDirActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            DicomDirectory reg = new DicomDirectory();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj = reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_dcmDirActionPerformed

    private void adminReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminReportsActionPerformed
        try {
            pane.removeAll();
            pane.repaint();

            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            AdminReports reg = new AdminReports();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_adminReportsActionPerformed

    private void menuStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuStatusActionPerformed
        try {
            pane.removeAll();
            pane.repaint();

            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            AdminReportingPanel reg = new AdminReportingPanel();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_menuStatusActionPerformed

    private void analysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analysisActionPerformed
        try {
            pane.removeAll();
            pane.repaint();

            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            ReportedDataAnalysis reg = new ReportedDataAnalysis();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_analysisActionPerformed

    private void attachedReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachedReportActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }

            Thread thread = new Thread() {
                public void run() {
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

                    CaptureReports reg = new CaptureReports("");

                    BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
                    Container north = (Container) ui.getNorthPane();
                    north.remove(0);
                    north.validate();
                    north.repaint();
                    pane.add(reg);
                    Constants.obj = reg;
                    setCursor(Cursor.getDefaultCursor());
                }
            };

            thread.start();
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_attachedReportActionPerformed

    private void viewAttachedReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAttachedReportsActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            ViewReports r = new ViewReports("");

            BasicInternalFrameUI ui = (BasicInternalFrameUI) r.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(r);
            Constants.obj=r;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_viewAttachedReportsActionPerformed

    private void stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockActionPerformed
        try {
            pane.removeAll();
            pane.repaint();

            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            StockConsumption reg = new StockConsumption();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_stockActionPerformed

    private void itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemActionPerformed
        try {
            pane.removeAll();
            pane.repaint();

            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            ItemGeneration reg = new ItemGeneration();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_itemActionPerformed

    private void chngPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chngPassActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            ChangePassword reg = new ChangePassword();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj=reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_chngPassActionPerformed

    private void priceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            CptWisePricing reg = new CptWisePricing();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj = reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_priceActionPerformed

    private void cptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cptActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            CptDefinition reg = new CptDefinition();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj = reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_cptActionPerformed

    private void templateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_templateActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            Template reg = new Template();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj = reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_templateActionPerformed

    private void setupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            Setup reg = new Setup();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj = reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_setupActionPerformed

    private void summaryReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryReportsActionPerformed
        if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            SummaryReports reg = new SummaryReports();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) reg.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(reg);
            Constants.obj = reg;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_summaryReportsActionPerformed

    private void mnuRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRefActionPerformed
        // TODO add your handling code here:
                if(Constants.obj!=null)
        {
            Constants.obj.dispose();
        }
        
        try {
            pane.removeAll();
            pane.repaint();
            Constants.bgFrame.hide();
            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            ReferringPhysician r = new ReferringPhysician();

            BasicInternalFrameUI ui = (BasicInternalFrameUI) r.getUI();
            Container north = (Container) ui.getNorthPane();
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(r);
            Constants.obj = r;
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_mnuRefActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem add;
    private javax.swing.JMenuItem adminReports;
    private javax.swing.JMenuItem analysis;
    private javax.swing.JMenuItem attachedReport;
    private javax.swing.JMenuItem chngPass;
    private javax.swing.JMenuItem coun;
    private javax.swing.JMenuItem cpt;
    private javax.swing.JMenuItem dcmDir;
    public javax.swing.JMenuItem empReg;
    private javax.swing.JMenuItem item;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator11;
    private javax.swing.JPopupMenu.Separator jSeparator12;
    private javax.swing.JPopupMenu.Separator jSeparator13;
    private javax.swing.JPopupMenu.Separator jSeparator14;
    private javax.swing.JPopupMenu.Separator jSeparator15;
    private javax.swing.JPopupMenu.Separator jSeparator16;
    private javax.swing.JPopupMenu.Separator jSeparator17;
    private javax.swing.JPopupMenu.Separator jSeparator18;
    private javax.swing.JPopupMenu.Separator jSeparator19;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator20;
    private javax.swing.JPopupMenu.Separator jSeparator21;
    private javax.swing.JPopupMenu.Separator jSeparator22;
    private javax.swing.JPopupMenu.Separator jSeparator23;
    private javax.swing.JPopupMenu.Separator jSeparator24;
    private javax.swing.JPopupMenu.Separator jSeparator25;
    private javax.swing.JPopupMenu.Separator jSeparator26;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenu menuReferringPhysician;
    private javax.swing.JMenuItem menuStatus;
    private javax.swing.JMenuItem mnuRef;
    private javax.swing.JMenuItem order;
    private javax.swing.JDesktopPane pane;
    private javax.swing.JMenuItem pic;
    private javax.swing.JMenuItem price;
    private javax.swing.JMenuItem reg;
    private javax.swing.JMenuItem rep;
    private javax.swing.JMenuItem repo;
    private javax.swing.JMenuItem setup;
    private javax.swing.JMenu setupMenu;
    private javax.swing.JMenuItem stock;
    private javax.swing.JMenuItem summaryReports;
    private javax.swing.JMenuItem tech;
    private javax.swing.JMenuItem template;
    private javax.swing.JMenuItem thumb;
    private javax.swing.JMenuItem viewAttachedReports;
    // End of variables declaration//GEN-END:variables

    private void setRoleWiseMenus() {

        switch (Constants.employeeRole) {
            case "R":
                template.setEnabled(false);
                cpt.setEnabled(false);
                price.setEnabled(false);
                empReg.setEnabled(false);
                rep.setEnabled(false);
                tech.setEnabled(false);
                add.setEnabled(false);
                setup.setEnabled(false);
                item.setEnabled(false);
                adminReports.setEnabled(false);
                menuStatus.setEnabled(false);
                analysis.setEnabled(false);
                mnuRef.setEnabled(false);
                break;

            case "T":
                item.setEnabled(false);
                adminReports.setEnabled(false);
                pic.setEnabled(false);
                thumb.setEnabled(false);
                template.setEnabled(false);
                cpt.setEnabled(false);
                price.setEnabled(false);
                rep.setEnabled(false);
                empReg.setEnabled(false);
                add.setEnabled(false);
                setup.setEnabled(false);
                menuStatus.setEnabled(false);
                analysis.setEnabled(false);
                mnuRef.setEnabled(false);
                break;
            case "D":
                item.setEnabled(false);
                adminReports.setEnabled(false);
                pic.setEnabled(false);
                thumb.setEnabled(false);
                reg.setEnabled(false);
                cpt.setEnabled(false);
                price.setEnabled(false);
                empReg.setEnabled(false);
                order.setEnabled(false);
                tech.setEnabled(false);
                coun.setEnabled(false);
                setup.setEnabled(false);
                menuStatus.setEnabled(false);
                analysis.setEnabled(false);
                attachedReport.setEnabled(false);
                mnuRef.setEnabled(false);
                break;
            case "A":
            default:
                break;
                
            case "P":
                pic.setEnabled(false);
                thumb.setEnabled(false);
                template.setEnabled(false);
                cpt.setEnabled(false);
                price.setEnabled(false);
                empReg.setEnabled(false);
                rep.setEnabled(false);
                tech.setEnabled(false);
                add.setEnabled(false);
                setup.setEnabled(false);
                item.setEnabled(false);
//                adminReports.setEnabled(false);
                reg.setEnabled(false);
                order.setEnabled(false);
                coun.setEnabled(false);
                menuStatus.setEnabled(false);
                dcmDir.setEnabled(false);
                stock.setEnabled(false);
//                chngPass.setEnabled(false);
//                analysis.setEnabled(false);
                attachedReport.setEnabled(false);
                viewAttachedReports.setEnabled(false);
                mnuRef.setEnabled(false);
                break;
                
                case "U":
                pic.setEnabled(false);
                thumb.setEnabled(false);
                template.setEnabled(false);
                cpt.setEnabled(false);
                price.setEnabled(false);
                empReg.setEnabled(false);
                rep.setEnabled(false);
                tech.setEnabled(false);
                add.setEnabled(false);
                setup.setEnabled(false);
                item.setEnabled(false);
//                adminReports.setEnabled(false);
                reg.setEnabled(false);
                order.setEnabled(false);
                coun.setEnabled(false);
                menuStatus.setEnabled(false);
                dcmDir.setEnabled(false);
                stock.setEnabled(false);
//                chngPass.setEnabled(false);
                analysis.setEnabled(false);
                attachedReport.setEnabled(false);
                viewAttachedReports.setEnabled(false);
                repo.setEnabled(false);
                mnuRef.setEnabled(false);
                break;
        }
    }

    private void addPane() {
        try {
            pane.removeAll();
            pane.repaint();

            try {
                if (Constants.webcam != null || Constants.webcam.open()) {
                    Constants.webcam.close();
                }
            } catch (Exception e) {
            }
            paneFrame r = new paneFrame();
            
            BasicInternalFrameUI ui = (BasicInternalFrameUI) r.getUI();
            Container north = (Container) ui.getNorthPane();
            ui.setNorthPane(null);
            ui.setEastPane(null);
            ui.setSouthPane(null);
            ui.setWestPane(null);
            north.remove(0);
            north.validate();
            north.repaint();
            pane.add(r);
            
            r.setMaximum(true);
            Constants.bgFrame=r;
            r.grabFocus();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void setImage() {
    
        BackgroundPanel bp = new BackgroundPanel("C:\\Users\\Public\\Pictures\\Sample Pictures\\Desert.jpg",scrnSize.width,scrnSize.height-taskBarHeight);
            mainPanel.add(bp);
            mainPanel.validate();
            mainPanel.repaint();
    }
    
    
    public class BackgroundPanel extends javax.swing.JPanel {

        java.awt.Image image;
        public BackgroundPanel(String path,int width,int height) {
            try {
                image = javax.imageio.ImageIO.read(new File(path));
                java.awt.Dimension size = new java.awt.Dimension(width, height);
                setPreferredSize(size);
                setMinimumSize(size);
                setMaximumSize(size);
                setSize(size);
                setLayout(null);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        @Override
        protected void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);
            if (image != null) {
                g.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), this);
            }
        }
    }
    
    
    
    
    
    private void setBackGroundImage() {

        try {
            ImageIcon icon = new ImageIcon("C:\\Users\\Public\\Pictures\\Sample Pictures\\Desert.jpg");
            Image image = icon.getImage();
            Image scaledImage = image.getScaledInstance(pane.getWidth(), pane.getWidth(), Image.SCALE_FAST);
            if (image != null) {
                pane.setBorder(new CentredBackgroundBorder(scaledImage));
            } else {
//                Constants.log(Constants.LogLevel.INFO, "not an image");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    
    
    
    public class CentredBackgroundBorder implements Border {

    private final Image image;

    public CentredBackgroundBorder(Image image) {
        this.image = image;
    }

    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
        int x0 = x + (width - image.getWidth(c)) / 2;
        int y0 = y + (height - image.getHeight(c)) / 2;
        g.drawImage(image, 0, 0,pane.getWidth(),pane.getHeight(), null);
    }

    @Override
    public Insets getBorderInsets(Component c) {
        return new Insets(0, 0, 0, 0);
    }

    public boolean isBorderOpaque() {
        return true;
    }
}
    
    
    
}
