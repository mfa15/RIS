/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.ris.src;

import app.ris.bo.Constants;
import app.ris.bo.CptWiseOrderEntryBO;
import app.ris.bo.OrderEntryBO;
import app.ris.bo.PatientAttendantInfo;
import app.ris.bo.PatientBO;
import app.ris.bo.PatientTypeBo;
import app.ris.dam.dam;
import app.ris.reporting.CptWiseOrderGenerationReportEMT;
import app.ris.reporting.OrderRefundReport;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 */
public class OrderEntryMultipleCpts extends javax.swing.JInternalFrame {

    /**
     * Creates new form OrderEntryMultipleCpts
     */
    PatientRegistrationForm pr;
    LinkedHashMap<String, String> cptMap = new LinkedHashMap<String, String>();
    LinkedHashMap<String, PatientTypeBo> patientTypeMap = new LinkedHashMap<String, PatientTypeBo>();
    LinkedHashMap<String, CptWiseOrderEntryBO> cptWiseOrderMap = new LinkedHashMap<String, CptWiseOrderEntryBO>();
    LinkedHashMap<String, CptWiseOrderEntryBO> cptMapForPrint = new LinkedHashMap<String, CptWiseOrderEntryBO>();
    HashMap<String, PatientBO> viewMap = new HashMap<String, PatientBO>();
    LinkedHashMap<String, OrderEntryBO> orderMap = new LinkedHashMap<>();
    dam d = new dam();
    OrderEntryBO obo = new OrderEntryBO();

    public OrderEntryMultipleCpts() {

        initComponents();
        Dimension desktopSize = Constants.pane1.getSize();
        Dimension jInternalFrameSize = this.getSize();
        this.setLocation((desktopSize.width - jInternalFrameSize.width) / 2,
                (desktopSize.height - jInternalFrameSize.height) / 2);
        this.setVisible(true);

        fillPatientTypeCmb();
        fillCptCmb();
        fillPreDefHist();
        fillRefPhy();

        AutoCompleteDecorator.decorate(cmbCptDesc);
        AutoCompleteDecorator.decorate(cmbPatientType);
        AutoCompleteDecorator.decorate(cmbPreDefHist);
        AutoCompleteDecorator.decorate(cmbReferringDoc);
        clearOrderDetailTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtCnic = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableOrder = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbCptDesc = new javax.swing.JComboBox<String>();
        cmbPatientType = new javax.swing.JComboBox<String>();
        btnAddTest = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtHeight = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cmbReferringDoc = new javax.swing.JComboBox<String>();
        chkUrgent = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableOrderDetail = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        btnOrder = new javax.swing.JButton();
        btnInvoice = new javax.swing.JButton();
        btnReprint = new javax.swing.JButton();
        btnRefund = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtHistory = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        cmbPreDefHist = new javax.swing.JComboBox<String>();
        jLabel11 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();

        jToggleButton1.setText("jToggleButton1");

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Order Entry");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Patients"));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Patient ID:");

        txtID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIDKeyPressed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("CNIC:");

        txtCnic.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCnicKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Name:");

        txtName.setEditable(false);
        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNameKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCnic, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                        .addGap(126, 126, 126)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtID)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCnic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tableOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Name", "Order ID", "Order Location", "Order Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrder.getTableHeader().setReorderingAllowed(false);
        tableOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOrderMouseClicked(evt);
            }
        });
        tableOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableOrderKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tableOrder);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Order Entry"));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Patient Type");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("CPT Description:");

        btnAddTest.setText("Add");
        btnAddTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTestActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("Weight");

        txtWeight.setToolTipText("");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setText("KGs");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setText("Height");

        txtHeight.setToolTipText("");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setText("FEET");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Referring Physician:");

        chkUrgent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        chkUrgent.setText("Urgent");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbReferringDoc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(cmbPatientType, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkUrgent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbCptDesc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddTest)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbReferringDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPatientType, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkUrgent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCptDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddTest))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel18)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tableOrderDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "CPT Code", "Description", "Price", "Accession Number", "Generate Order"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableOrderDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOrderDetailMouseClicked(evt);
            }
        });
        tableOrderDetail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableOrderDetailKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tableOrderDetail);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setText("KGs");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel19)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel19)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnExit.setBackground(new java.awt.Color(255, 0, 0));
        btnExit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnExit.setForeground(new java.awt.Color(255, 0, 0));
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnOrder.setText("Generate Order");
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });

        btnInvoice.setText("Generate Invoice");
        btnInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvoiceActionPerformed(evt);
            }
        });

        btnReprint.setText("Re-print Invoice");
        btnReprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReprintActionPerformed(evt);
            }
        });

        btnRefund.setBackground(new java.awt.Color(255, 102, 102));
        btnRefund.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnRefund.setForeground(new java.awt.Color(255, 0, 0));
        btnRefund.setText("Refund");
        btnRefund.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefundActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnReprint, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(btnOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRefund, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnOrder)
                        .addComponent(btnInvoice))
                    .addComponent(btnExit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnReprint)
                        .addComponent(btnRefund)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("History"));

        txtHistory.setColumns(20);
        txtHistory.setRows(5);
        jScrollPane3.setViewportView(txtHistory);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("*Predefined History:");

        cmbPreDefHist.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "**Select**", " " }));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(cmbPreDefHist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPreDefHist))
                .addContainerGap())
        );

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Total Payable:");

        txtPrice.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIDKeyPressed
        int key = evt.getKeyCode();
        if (key == KeyEvent.VK_ENTER) {
            searchPatient();
        }
    }//GEN-LAST:event_txtIDKeyPressed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchPatient();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtCnicKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCnicKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();
        if (key == KeyEvent.VK_ENTER) {
            searchPatient();
        }
    }//GEN-LAST:event_txtCnicKeyPressed

    private void tableOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOrderMouseClicked
        selection();
    }//GEN-LAST:event_tableOrderMouseClicked

    private void tableOrderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableOrderKeyReleased
        selection();
    }//GEN-LAST:event_tableOrderKeyReleased

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        if (pr == null) {
        } //            Constants.bgFrame.show();
        else {
            pr.show();
            Constants.obj = pr;
        }
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //txtReferringPhy.setText("");
        txtName.setText("");
        txtPrice.setText("");
        clearTable();
        cmbPatientType.setSelectedIndex(0);
        cmbCptDesc.setSelectedIndex(0);
        txtCnic.setText("");
        txtID.setText("");
        txtHistory.setText("");
        clearOrderDetailTable();
        cmbPatientType.setEnabled(true);
        cptWiseOrderMap.clear();
        cmbPreDefHist.setSelectedIndex(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed

        int rowCount = tableOrderDetail.getRowCount();
        if (rowCount > 0) {
            for (int i = 0; i < rowCount; i++) {
                CptWiseOrderEntryBO temp = cptWiseOrderMap.get(tableOrderDetail.getValueAt(i, 0).toString());
                temp.setChkbox(Boolean.valueOf(tableOrderDetail.getValueAt(i, 4).toString()) ? "Y" : "N");
                cptWiseOrderMap.replace(temp.getCptCode(), temp);
            }
            String hist = "";
            try {
                hist = cmbPreDefHist.getSelectedItem().toString();
            } catch (NullPointerException ex) {
                JOptionPane.showMessageDialog(this, "Please Select Relevant Predefined History.");
                return;
            }

            Object refPhy = cmbReferringDoc.getSelectedItem();

//            if (refPhy == null || refPhy.toString().equalsIgnoreCase("**Select**")) {
//                JOptionPane.showMessageDialog(this, "Please Select Referring Doctor");
//                return;
//                refPhy = "0";
//            } else {
//
//            }
            refPhy = refPhy.toString().split(" : ")[1];

            if (hist.equalsIgnoreCase("**Select**")) {
                JOptionPane.showMessageDialog(this, "Please Select Relevant Predefined History.");
                return;
            }

            if (!txtName.getText().equalsIgnoreCase("")) {
                String arr[] = txtID.getText().split("-");
                String patientTypeId = getTypeId(cmbPatientType.getSelectedItem().toString());
                String history = txtHistory.getText();
                String weight = txtWeight.getText();
                String height = txtHeight.getText();
                String urgent = "";
                if (chkUrgent.isSelected()) {
                    urgent = "Y";
                } else {
                    urgent = "N";
                }
                String id = d.saveOrderMaster(arr, patientTypeId, history, weight, height, hist, refPhy.toString(), urgent);
                if (!id.equalsIgnoreCase("")) {
                    System.out.println("insert each order here.");
                    for (String key : cptWiseOrderMap.keySet()) {
                        CptWiseOrderEntryBO temp = cptWiseOrderMap.get(key);
                        if (temp.getChkbox().equalsIgnoreCase("Y")) {
                            temp.setOrderId(id);
                            String accNum = d.saveOrderDetail(temp, paymentStatus());
                            temp.setAccessionNum(accNum);
                            cptWiseOrderMap.replace(temp.getCptCode(), temp);
                        }

                    }
                }
                fillOrderDetailTable();
                searchPatient();
                rowCount = tableOrder.getRowCount();
                tableOrder.setRowSelectionInterval(rowCount - 1, rowCount - 1);
                selection();
            } else {
                JOptionPane.showMessageDialog(this, "No Patient is Selected");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Nothing to Save");
        }
    }//GEN-LAST:event_btnOrderActionPerformed

    private void btnInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvoiceActionPerformed
        try {
            int row = tableOrder.getSelectedRow();
            String id = tableOrder.getValueAt(row, 2).toString();

            if (row >= 0) {
                String orderStatus = d.getOrderStatus(id);
                if (Integer.valueOf(orderStatus) == 1) {
                    if (print("***Original***")) {
                        d.updateOrderDetailStatusInvoice(id, Constants.status[1]);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Invoice Already Generated. Kindly Press Use Reprinting Option");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Please Select Patient First");
            }
        } catch (java.lang.Exception e) {
            JOptionPane.showMessageDialog(this, "Please Select Patient First");
        }

    }//GEN-LAST:event_btnInvoiceActionPerformed

    private void btnAddTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTestActionPerformed
        int row = tableOrder.getSelectedRow();
        if (row >= 0) {
            this.tableOrder.clearSelection();
            clearTable();
            clearOrderDetailTable();
            searchPatient();
        }
        add();
        calculatePrice();
    }//GEN-LAST:event_btnAddTestActionPerformed

    private void tableOrderDetailKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableOrderDetailKeyReleased
        rowChanged();
    }//GEN-LAST:event_tableOrderDetailKeyReleased

    private void tableOrderDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOrderDetailMouseClicked
        rowChanged();
    }//GEN-LAST:event_tableOrderDetailMouseClicked

    private void btnReprintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReprintActionPerformed
        int row = tableOrder.getSelectedRow();
        if (row >= 0) {
            String orderStatus = d.getOrderStatus(tableOrder.getValueAt(row, 2).toString());
            if (Integer.valueOf(orderStatus) >= 2) {
                print("***Duplicate***");
            } else {
                JOptionPane.showMessageDialog(this, "Kindly Generate Original Invoice First");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select patient First");
        }
    }//GEN-LAST:event_btnReprintActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        if (!txtID.getText().equalsIgnoreCase("")) {
            searchPatient();
        }
    }//GEN-LAST:event_formFocusGained

    private void btnRefundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefundActionPerformed
        int row = tableOrder.getSelectedRow();
        String id = tableOrder.getValueAt(row, 2).toString();

        if (row >= 0) {
            String orderStatus = d.getOrderStatus(id);
            if (Integer.valueOf(orderStatus) == 1 || Integer.valueOf(orderStatus) == 2 || Integer.valueOf(orderStatus) == 3) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you Sure you want to refund? "
                        + "\nOnce Refunded, Cannot be undone");
                if (confirm == 0) {
                    try {
                        String value = tableOrder.getValueAt(row, 2).toString();
                        if (d.updateOrderDetailStatus(value, Constants.status[6])) {
                            printRefund();
                            clearOrderDetailTable();
                            searchPatient();
                        }

                    } catch (NullPointerException npe) {
                        JOptionPane.showMessageDialog(this, "Order not Selected. Please select the Order for Refund");
                    }

                }
            } else {
                JOptionPane.showMessageDialog(this, "Cannot Refund this order. Patient Already Performed", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select patient order before deletion");
        }
    }//GEN-LAST:event_btnRefundActionPerformed

    private void txtNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTest;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnInvoice;
    private javax.swing.JButton btnOrder;
    private javax.swing.JButton btnRefund;
    private javax.swing.JButton btnReprint;
    private javax.swing.JButton btnSearch;
    private javax.swing.JCheckBox chkUrgent;
    private javax.swing.JComboBox<String> cmbCptDesc;
    private javax.swing.JComboBox<String> cmbPatientType;
    private javax.swing.JComboBox<String> cmbPreDefHist;
    private javax.swing.JComboBox<String> cmbReferringDoc;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTable tableOrder;
    private javax.swing.JTable tableOrderDetail;
    private javax.swing.JTextField txtCnic;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextArea txtHistory;
    public javax.swing.JTextField txtID;
    public javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables

    private void searchPatient() {
        clearTable();
        orderMap = new LinkedHashMap<>();
        viewMap = new HashMap<>();
        String arr[] = new String[2];
        arr = txtID.getText().split("-");

        if (txtCnic.getText().equals("") && txtID.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Both Criterias Cannot be NULL. Please specify at least one Value");
            return;
        }

        if (arr.length > 1) {
            d.searchOrderMaster(arr[0], arr[1], txtCnic.getText(), orderMap);
            d.searchPatient(arr[0], arr[1], "", "", "", viewMap);
        } else {
            d.searchOrderMaster(arr[0], "", txtCnic.getText(), orderMap);
            d.searchPatient("", "", "", txtCnic.getText(), "", viewMap);
        }

        if (orderMap.size() > 0) {
            fillTable();
        }

        if (viewMap.size() > 0) {
            for (String key : viewMap.keySet()) {
                PatientBO temp = viewMap.get(key);
                txtName.setText(temp.getName());
                txtID.setText(temp.getLocation_id() + "-" + temp.getPatientId());
//                try{
//                    tableOrder.setRowSelectionInterval(0, 0);
//                    selection();
//                }catch(java.lang.IllegalArgumentException ex)
//                {}
            }
        }

    }

    private void fillPatientsOnly() {
//        ListSelectionModel lsm = this.tableOrder.getSelectionModel();
//        lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//        //------------- Information Filled in table
//        DefaultTableModel model = (DefaultTableModel) tableOrder.getModel();

        for (String key : viewMap.keySet()) {
            PatientBO pb = viewMap.get(key);
            txtName.setText(pb.getName());
            break;
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private void fillTable() {
        ListSelectionModel lsm = this.tableOrder.getSelectionModel();
        lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //------------- Information Filled in table
        DefaultTableModel model = (DefaultTableModel) tableOrder.getModel();

        for (String key : orderMap.keySet()) {
            OrderEntryBO pb = orderMap.get(key);
            String arr[] = {pb.getPatientLocationID() + "-" + pb.getPatientID(), pb.getPatientName(), pb.getOrderID(), pb.getOrderLocationDesc(),
                pb.getOrderDateTime()};
            model.addRow(arr);
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private void clearTable() {
        this.orderMap.clear();
        this.cptWiseOrderMap.clear();
        tableOrder.clearSelection();

        DefaultTableModel dm = (DefaultTableModel) tableOrder.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged();
    }

    private void fillPatientTypeCmb() {
        cmbPatientType.removeAllItems();
        patientTypeMap.clear();

        d.getPatientType(patientTypeMap);
        if (patientTypeMap.size() > 0) {
            for (String key : patientTypeMap.keySet()) {
                PatientTypeBo pbo = patientTypeMap.get(key);
                if (pbo.getActive().equalsIgnoreCase("Y")) {
                    cmbPatientType.addItem(pbo.getDesc());
                }
            }
        }
    }

    private void fillCptCmb() {
        cmbCptDesc.removeAllItems();
        cptMap.clear();

        d.getCptInformation(cptMap);

        if (cptMap.size() > 0) {
            populateCmbCpt();
        }
    }

    private void populateCmbCpt() {

        for (String key : cptMap.keySet()) {
            cmbCptDesc.addItem(cptMap.get(key));
        }
    }

    private String getCptId(String value) {
        String id = "";

        for (String key : cptMap.keySet()) {
            if (cptMap.get(key).equalsIgnoreCase(value)) {
                id = key;
                break;
            }
        }

        return id;
    }

    private String getTypeId(String value) {
        String id = "";

        for (String key : patientTypeMap.keySet()) {
            PatientTypeBo ptbo = patientTypeMap.get(key);
            if (ptbo.getDesc().equalsIgnoreCase(value)) {
                id = ptbo.getId();
                break;
            }
        }

        return id;
    }

    private void fillOrderDetailTable() {
        clearOrderDetailTable();
        fillOrderTable();
    }

    private void clearOrderDetailTable() {
        tableOrderDetail.clearSelection();
        DefaultTableModel dm = (DefaultTableModel) tableOrderDetail.getModel();
        dm.getDataVector().removeAllElements();
        dm.fireTableDataChanged();
    }

    private void fillOrderTable() {
        ListSelectionModel lsm = this.tableOrderDetail.getSelectionModel();
        lsm.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //------------- Information Filled in table
        DefaultTableModel model = (DefaultTableModel) tableOrderDetail.getModel();
        for (String key : cptWiseOrderMap.keySet()) {
            CptWiseOrderEntryBO value = cptWiseOrderMap.get(key);
            Object arr[] = {value.getCptCode(), value.getCptDescription(), value.getPrice(), value.getAccessionNum(), value.getChkbox().equalsIgnoreCase("Y")};
            model.addRow(arr);
//            txtReferringPhy.setText(value.getRefPhy());
            //           cmbReferringDoc.setSelectedItem(value.getRefPhy());
            cmbPreDefHist.setSelectedItem(value.getPredef_hist());
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }

    private void selection() {
        int row = tableOrder.getSelectedRow();
        if (row >= 0) {
            txtName.setText(tableOrder.getValueAt(row, 1).toString());
            txtID.setText(tableOrder.getValueAt(row, 0).toString());
            cptWiseOrderMap.clear();
            try {
                String orderId = tableOrder.getValueAt(row, 2).toString();
                OrderEntryBO oeb = orderMap.get(orderId);
                txtHistory.setText(oeb.getHistory());
                d.getOrderDetails(orderId, cptWiseOrderMap);
                for (String key : patientTypeMap.keySet()) {
                    if (key.equalsIgnoreCase(oeb.getPatientType())) {
                        PatientTypeBo pbo = patientTypeMap.get(key);
                        cmbPatientType.setSelectedItem(pbo.getDesc());
                        cmbPatientType.setEnabled(false);
                        calculatePrice();
                    }
                }
                if (cptWiseOrderMap.size() > 0) {
                    fillOrderDetailTable();

                    String[] demographics = new String[2];
                    d.getWeightHeight(orderId, demographics);
                    txtWeight.setText(demographics[0]);
                    txtHeight.setText(demographics[1]);
                }
            } catch (java.lang.NullPointerException ex) {
                clearOrderDetailTable();
            }

        }
    }

    private void add() {

        cmbPatientType.setEnabled(false);
        String cptId = getCptId(cmbCptDesc.getSelectedItem().toString());
        String patientTypeId = getTypeId(cmbPatientType.getSelectedItem().toString());

        CptWiseOrderEntryBO cbo = new CptWiseOrderEntryBO();
        cbo.setCptId(cptId);
        cbo.setPatientTypeId(patientTypeId);

        boolean flag = d.getCptInformation(cptId, cbo);
        if (!flag) {
            JOptionPane.showMessageDialog(this, "Unable to Get CPT Information. Returning....");
            return;
        }
        flag = d.getPatientWiseCptPrice(cbo);
        if (!flag || cbo.getPrice().equalsIgnoreCase("0")) {
            cbo.setPrice(cbo.getCptCost());
        }

        cbo.setAccessionNum("");
        cbo.setChkbox("Y");
        cptWiseOrderMap.put(cbo.getCptCode(), cbo);
        fillOrderDetailTable();

    }

    private void sumPrice() {
        int rowCount = tableOrderDetail.getRowCount();
        String price = "0/- PKR";
        int amount = 0;
        if (rowCount > 0) {
            for (int i = 0; i < rowCount; i++) {
                boolean flag = Boolean.valueOf(tableOrderDetail.getValueAt(i, 4).toString());
                if (flag) {
                    amount = amount + Integer.valueOf(tableOrderDetail.getValueAt(i, 2).toString());
                    price = amount + "/- PKR";
                    txtPrice.setText(price);
                }
            }
        }
    }

    private void rowChanged() {
        int row = tableOrderDetail.getSelectedRow();
        if (row >= 0) {
            sumPrice();
        }
    }

    private boolean paymentStatus() {
        boolean flag = false;
        String patientTypeId = getTypeId(cmbPatientType.getSelectedItem().toString());
        PatientTypeBo pbo = patientTypeMap.get(patientTypeId);
        flag = pbo.getPayment_status().equalsIgnoreCase("P");
        return flag;
    }

    private void calculatePrice() {
        if (paymentStatus()) {
            sumPrice();
        } else {
            txtPrice.setText("0/- PKR");
        }
    }

    private boolean print(String stateOfReceipt) {
        boolean flag = false;
        int row = tableOrder.getSelectedRow();
        if (row >= 0) {
            String patientId[] = tableOrder.getValueAt(row, 0).toString().split("-");
            PatientBO value = new PatientBO();
            d.getPatientInformation(patientId[0], patientId[1], value);
//            d.getPatientPicture(patientId[0], patientId[1]);
            Constants.profilePath = d.get_profile_picture(patientId[0], patientId[1]);
            d.getThumbImpression(patientId[0], patientId[1]);
            String[] orderDetails = new String[4];
            orderDetails[0] = tableOrder.getValueAt(row, 2).toString();
            orderDetails[1] = tableOrder.getValueAt(row, 3).toString();
            orderDetails[2] = tableOrder.getValueAt(row, 4).toString();
            orderDetails[3] = cmbPatientType.getSelectedItem().toString();
            String history = d.getHistory(orderDetails[0]);
            String[] demographics = new String[2];
            d.getWeightHeight(orderDetails[0], demographics);
            value.setWeight(demographics[0]);
            value.setHeight(demographics[1]);

            value.setAge(Constants.calculateAge(value.getDob()));
            PatientAttendantInfo pai = null;
            if (value.getAttendant_flag().equalsIgnoreCase("Y")) {
                pai = d.getAttendantInfo(value.getLocation_id(), value.getPatientId());
                try {
                    if (pai != null) {
                        Constants.attendProfilePath = d.get_profile_picture_attendant(value.getLocation_id(), value.getPatientId());
                        if (!Constants.attendProfilePath.equalsIgnoreCase("")) {
                            d.getThumbImpressionAttendant(value.getLocation_id(), value.getPatientId());
                            System.out.println("attendant info exists. add");
                        }
                    }
                } catch (Exception e) {
                }

            }

            //refill cptwiseordermap
            cptMapForPrint.clear();
            String orderId = tableOrder.getValueAt(row, 2).toString();
            d.getDetailsForPrint(orderId, cptMapForPrint);
            if (cptMapForPrint.size() > 0) {
                CptWiseOrderGenerationReportEMT report = new CptWiseOrderGenerationReportEMT(stateOfReceipt);
                String path = report.generateOrder(cptMapForPrint, history, value, orderDetails, paymentStatus(), pai);
                if (!path.equals("")) {
                    try {
                        File pdf = new File(path);
                        Desktop.getDesktop().open(pdf);
                        flag = true;
                    } catch (IOException ex) {
                        Logger.getLogger(OrderEntryMultipleCpts.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Unable to Fetch Information for Receipt Printing. Please Contact PACS Administrator");
            }
        }
        return flag;
    }

    private boolean printRefund() {
        boolean flag = false;
        int row = tableOrder.getSelectedRow();
        if (row >= 0) {
            String patientId[] = tableOrder.getValueAt(row, 0).toString().split("-");
            PatientBO value = new PatientBO();
            d.getPatientInformation(patientId[0], patientId[1], value);
            String[] orderDetails = new String[3];
            orderDetails[0] = tableOrder.getValueAt(row, 2).toString();
            orderDetails[1] = tableOrder.getValueAt(row, 3).toString();
            orderDetails[2] = tableOrder.getValueAt(row, 4).toString();
            String history = d.getHistory(orderDetails[0]);
            String[] demographics = new String[2];
            d.getWeightHeight(orderDetails[0], demographics);
            value.setWeight(demographics[0]);
            value.setHeight(demographics[1]);
            String dob[] = value.getDob().split("-");
            LocalDate start = LocalDate.of((int) Integer.valueOf(dob[0]), (int) Integer.valueOf(dob[1]), (int) Integer.valueOf(dob[2]));
            LocalDate end = LocalDate.now(); // use for age-calculation: LocalDate.now()
            long years = ChronoUnit.YEARS.between(start, end);
            System.out.println(years); // 17
            value.setAge(String.valueOf(years));

            OrderRefundReport report = new OrderRefundReport();
            String path = report.generateOrder(cptWiseOrderMap, history, value, orderDetails, paymentStatus());
            if (!path.equals("")) {
                try {
                    File pdf = new File(path);
                    Desktop.getDesktop().open(pdf);
                    flag = true;
                } catch (IOException ex) {
                    Logger.getLogger(OrderEntryMultipleCpts.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return flag;
    }

    private void fillPreDefHist() {
        cmbPreDefHist.removeAllItems();
        for (String s : Constants.preDefinedHist) {
            cmbPreDefHist.addItem(s);
        }
    }

    private void fillRefPhy() {
        // cmbReferringDoc.removeAllItems();
        dam d = new dam();
        ArrayList<String> list = d.getReferringDocList(Constants.locationID);
        //cmbReferringDoc.addItem("**Select**");
        for (String s : list) {
            cmbReferringDoc.addItem(s);
        }
    }

}
